
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.8.1
 * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
 */
Prisma.prismaVersion = {
  client: "3.8.1",
  engine: "461d6a05159055555eb7dfb337c9fb271cbd4d7e"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  firebase_uid: 'firebase_uid',
  email: 'email',
  name: 'name',
  last_name: 'last_name',
  score: 'score',
  image_reference: 'image_reference',
  image_url: 'image_url',
  image_type: 'image_type',
  image_size_wh: 'image_size_wh'
});

exports.Prisma.Menu_main_activityScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  name_icon: 'name_icon',
  color_icon: 'color_icon',
  color_title: 'color_title',
  color_background: 'color_background'
});

exports.Prisma.ActivityScalarFieldEnum = makeEnum({
  id: 'id',
  author_uid: 'author_uid',
  title: 'title',
  with_password: 'with_password',
  password: 'password',
  type_activity: 'type_activity',
  excluded: 'excluded',
  created: 'created',
  image_reference: 'image_reference',
  image_url: 'image_url',
  image_type: 'image_type',
  image_size_wh: 'image_size_wh',
  difficulty_level: 'difficulty_level'
});

exports.Prisma.Activity_question_responseScalarFieldEnum = makeEnum({
  id: 'id',
  activity_id: 'activity_id',
  number_question: 'number_question',
  answer_one: 'answer_one',
  answer_two: 'answer_two',
  answer_tree: 'answer_tree',
  answer_four: 'answer_four',
  right_answer: 'right_answer',
  question: 'question'
});

exports.Prisma.Activity_question_usersScalarFieldEnum = makeEnum({
  id: 'id',
  activity_id: 'activity_id',
  user_uid: 'user_uid',
  value: 'value',
  processed: 'processed',
  created: 'created',
  display_to_user: 'display_to_user'
});

exports.Prisma.Activity_question_users_responseScalarFieldEnum = makeEnum({
  id: 'id',
  activity_id: 'activity_id',
  user_uid: 'user_uid',
  number_question: 'number_question',
  answer: 'answer',
  comments: 'comments'
});

exports.Prisma.RewardScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  name: 'name',
  description: 'description',
  value: 'value',
  picture: 'picture'
});

exports.Prisma.Reward_usersScalarFieldEnum = makeEnum({
  id: 'id',
  user_uid: 'user_uid',
  reward_id: 'reward_id',
  amount: 'amount'
});

exports.Prisma.Activity_sentencesScalarFieldEnum = makeEnum({
  id: 'id',
  activity_id: 'activity_id',
  number_sentence: 'number_sentence',
  complete_sentence: 'complete_sentence',
  marked_sentence: 'marked_sentence',
  hidden_words: 'hidden_words',
  words_help: 'words_help'
});

exports.Prisma.Activity_sentences_usersScalarFieldEnum = makeEnum({
  id: 'id',
  activity_id: 'activity_id',
  user_uid: 'user_uid',
  value: 'value',
  processed: 'processed'
});

exports.Prisma.Activity_sentences_users_responseScalarFieldEnum = makeEnum({
  id: 'id',
  activity_id: 'activity_id',
  user_uid: 'user_uid',
  number_sentence: 'number_sentence',
  sentences_informed: 'sentences_informed',
  comments: 'comments'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  users: 'users',
  menu_main_activity: 'menu_main_activity',
  activity: 'activity',
  activity_question_response: 'activity_question_response',
  activity_question_users: 'activity_question_users',
  activity_question_users_response: 'activity_question_users_response',
  reward: 'reward',
  reward_users: 'reward_users',
  activity_sentences: 'activity_sentences',
  activity_sentences_users: 'activity_sentences_users',
  activity_sentences_users_response: 'activity_sentences_users_response'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
