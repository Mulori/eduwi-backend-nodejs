
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model community
 * 
 */
export type community = {
  id: number
  title: string | null
  description: string | null
  author_uid: string | null
  with_password: number | null
  password: string | null
}

/**
 * Model user_community
 * 
 */
export type user_community = {
  id: number
  community_id: number | null
  user_uid: string | null
}

/**
 * Model users
 * 
 */
export type users = {
  id: number
  firebase_uid: string
  email: string | null
  name: string | null
  last_name: string | null
}

/**
 * Model group_community
 * 
 */
export type group_community = {
  id: number
  community_id: number | null
  title: string | null
  description: string | null
  max_members: number | null
  with_password: number | null
  password: string | null
}

/**
 * Model user_group_community
 * 
 */
export type user_group_community = {
  id: number
  group_id: number | null
  user_uid: string | null
}

/**
 * Model menu_main_activity
 * 
 */
export type menu_main_activity = {
  id: number
  title: string
  name_icon: string | null
  color_icon: string | null
  color_title: string | null
  color_background: string | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Communities
 * const communities = await prisma.community.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Communities
   * const communities = await prisma.community.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.community`: Exposes CRUD operations for the **community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communities
    * const communities = await prisma.community.findMany()
    * ```
    */
  get community(): Prisma.communityDelegate<GlobalReject>;

  /**
   * `prisma.user_community`: Exposes CRUD operations for the **user_community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_communities
    * const user_communities = await prisma.user_community.findMany()
    * ```
    */
  get user_community(): Prisma.user_communityDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.group_community`: Exposes CRUD operations for the **group_community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Group_communities
    * const group_communities = await prisma.group_community.findMany()
    * ```
    */
  get group_community(): Prisma.group_communityDelegate<GlobalReject>;

  /**
   * `prisma.user_group_community`: Exposes CRUD operations for the **user_group_community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_group_communities
    * const user_group_communities = await prisma.user_group_community.findMany()
    * ```
    */
  get user_group_community(): Prisma.user_group_communityDelegate<GlobalReject>;

  /**
   * `prisma.menu_main_activity`: Exposes CRUD operations for the **menu_main_activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menu_main_activities
    * const menu_main_activities = await prisma.menu_main_activity.findMany()
    * ```
    */
  get menu_main_activity(): Prisma.menu_main_activityDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.8.1
   * Query Engine version: 34df67547cf5598f5a6cd3eb45f14ee70c3fb86f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    community: 'community',
    user_community: 'user_community',
    users: 'users',
    group_community: 'group_community',
    user_group_community: 'user_group_community',
    menu_main_activity: 'menu_main_activity'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CommunityCountOutputType
   */


  export type CommunityCountOutputType = {
    group_community: number
    user_community: number
  }

  export type CommunityCountOutputTypeSelect = {
    group_community?: boolean
    user_community?: boolean
  }

  export type CommunityCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CommunityCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CommunityCountOutputType
    : S extends undefined
    ? never
    : S extends CommunityCountOutputTypeArgs
    ?'include' extends U
    ? CommunityCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof CommunityCountOutputType ?CommunityCountOutputType [P]
  : 
     never
  } 
    : CommunityCountOutputType
  : CommunityCountOutputType




  // Custom InputTypes

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CommunityCountOutputType
     * 
    **/
    select?: CommunityCountOutputTypeSelect | null
  }



  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    community: number
    user_community: number
    user_group_community: number
  }

  export type UsersCountOutputTypeSelect = {
    community?: boolean
    user_community?: boolean
    user_group_community?: boolean
  }

  export type UsersCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsersCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsersCountOutputType
    : S extends undefined
    ? never
    : S extends UsersCountOutputTypeArgs
    ?'include' extends U
    ? UsersCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof UsersCountOutputType ?UsersCountOutputType [P]
  : 
     never
  } 
    : UsersCountOutputType
  : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type Group_communityCountOutputType
   */


  export type Group_communityCountOutputType = {
    user_group_community: number
  }

  export type Group_communityCountOutputTypeSelect = {
    user_group_community?: boolean
  }

  export type Group_communityCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Group_communityCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Group_communityCountOutputType
    : S extends undefined
    ? never
    : S extends Group_communityCountOutputTypeArgs
    ?'include' extends U
    ? Group_communityCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Group_communityCountOutputType ?Group_communityCountOutputType [P]
  : 
     never
  } 
    : Group_communityCountOutputType
  : Group_communityCountOutputType




  // Custom InputTypes

  /**
   * Group_communityCountOutputType without action
   */
  export type Group_communityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Group_communityCountOutputType
     * 
    **/
    select?: Group_communityCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model community
   */


  export type AggregateCommunity = {
    _count: CommunityCountAggregateOutputType | null
    _avg: CommunityAvgAggregateOutputType | null
    _sum: CommunitySumAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  export type CommunityAvgAggregateOutputType = {
    id: number | null
    with_password: number | null
  }

  export type CommunitySumAggregateOutputType = {
    id: number | null
    with_password: number | null
  }

  export type CommunityMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    author_uid: string | null
    with_password: number | null
    password: string | null
  }

  export type CommunityMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    author_uid: string | null
    with_password: number | null
    password: string | null
  }

  export type CommunityCountAggregateOutputType = {
    id: number
    title: number
    description: number
    author_uid: number
    with_password: number
    password: number
    _all: number
  }


  export type CommunityAvgAggregateInputType = {
    id?: true
    with_password?: true
  }

  export type CommunitySumAggregateInputType = {
    id?: true
    with_password?: true
  }

  export type CommunityMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    author_uid?: true
    with_password?: true
    password?: true
  }

  export type CommunityMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    author_uid?: true
    with_password?: true
    password?: true
  }

  export type CommunityCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    author_uid?: true
    with_password?: true
    password?: true
    _all?: true
  }

  export type CommunityAggregateArgs = {
    /**
     * Filter which community to aggregate.
     * 
    **/
    where?: communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communities to fetch.
     * 
    **/
    orderBy?: Enumerable<communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned communities
    **/
    _count?: true | CommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommunityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommunitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMaxAggregateInputType
  }

  export type GetCommunityAggregateType<T extends CommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunity[P]>
      : GetScalarType<T[P], AggregateCommunity[P]>
  }




  export type CommunityGroupByArgs = {
    where?: communityWhereInput
    orderBy?: Enumerable<communityOrderByWithAggregationInput>
    by: Array<CommunityScalarFieldEnum>
    having?: communityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityCountAggregateInputType | true
    _avg?: CommunityAvgAggregateInputType
    _sum?: CommunitySumAggregateInputType
    _min?: CommunityMinAggregateInputType
    _max?: CommunityMaxAggregateInputType
  }


  export type CommunityGroupByOutputType = {
    id: number
    title: string | null
    description: string | null
    author_uid: string | null
    with_password: number | null
    password: string | null
    _count: CommunityCountAggregateOutputType | null
    _avg: CommunityAvgAggregateOutputType | null
    _sum: CommunitySumAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  type GetCommunityGroupByPayload<T extends CommunityGroupByArgs> = Promise<
    Array<
      PickArray<CommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityGroupByOutputType[P]>
        }
      >
    >


  export type communitySelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    author_uid?: boolean
    with_password?: boolean
    password?: boolean
    users?: boolean | usersArgs
    group_community?: boolean | group_communityFindManyArgs
    user_community?: boolean | user_communityFindManyArgs
    _count?: boolean | CommunityCountOutputTypeArgs
  }

  export type communityInclude = {
    users?: boolean | usersArgs
    group_community?: boolean | group_communityFindManyArgs
    user_community?: boolean | user_communityFindManyArgs
    _count?: boolean | CommunityCountOutputTypeArgs
  }

  export type communityGetPayload<
    S extends boolean | null | undefined | communityArgs,
    U = keyof S
      > = S extends true
        ? community
    : S extends undefined
    ? never
    : S extends communityArgs | communityFindManyArgs
    ?'include' extends U
    ? community  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? usersGetPayload<S['include'][P]> | null :
        P extends 'group_community'
        ? Array < group_communityGetPayload<S['include'][P]>>  :
        P extends 'user_community'
        ? Array < user_communityGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? CommunityCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof community ?community [P]
  : 
          P extends 'users'
        ? usersGetPayload<S['select'][P]> | null :
        P extends 'group_community'
        ? Array < group_communityGetPayload<S['select'][P]>>  :
        P extends 'user_community'
        ? Array < user_communityGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? CommunityCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : community
  : community


  type communityCountArgs = Merge<
    Omit<communityFindManyArgs, 'select' | 'include'> & {
      select?: CommunityCountAggregateInputType | true
    }
  >

  export interface communityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Community that matches the filter.
     * @param {communityFindUniqueArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends communityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, communityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'community'> extends True ? CheckSelect<T, Prisma__communityClient<community>, Prisma__communityClient<communityGetPayload<T>>> : CheckSelect<T, Prisma__communityClient<community | null >, Prisma__communityClient<communityGetPayload<T> | null >>

    /**
     * Find the first Community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communityFindFirstArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends communityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, communityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'community'> extends True ? CheckSelect<T, Prisma__communityClient<community>, Prisma__communityClient<communityGetPayload<T>>> : CheckSelect<T, Prisma__communityClient<community | null >, Prisma__communityClient<communityGetPayload<T> | null >>

    /**
     * Find zero or more Communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communities
     * const communities = await prisma.community.findMany()
     * 
     * // Get first 10 Communities
     * const communities = await prisma.community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityWithIdOnly = await prisma.community.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends communityFindManyArgs>(
      args?: SelectSubset<T, communityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<community>>, PrismaPromise<Array<communityGetPayload<T>>>>

    /**
     * Create a Community.
     * @param {communityCreateArgs} args - Arguments to create a Community.
     * @example
     * // Create one Community
     * const Community = await prisma.community.create({
     *   data: {
     *     // ... data to create a Community
     *   }
     * })
     * 
    **/
    create<T extends communityCreateArgs>(
      args: SelectSubset<T, communityCreateArgs>
    ): CheckSelect<T, Prisma__communityClient<community>, Prisma__communityClient<communityGetPayload<T>>>

    /**
     * Create many Communities.
     *     @param {communityCreateManyArgs} args - Arguments to create many Communities.
     *     @example
     *     // Create many Communities
     *     const community = await prisma.community.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends communityCreateManyArgs>(
      args?: SelectSubset<T, communityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Community.
     * @param {communityDeleteArgs} args - Arguments to delete one Community.
     * @example
     * // Delete one Community
     * const Community = await prisma.community.delete({
     *   where: {
     *     // ... filter to delete one Community
     *   }
     * })
     * 
    **/
    delete<T extends communityDeleteArgs>(
      args: SelectSubset<T, communityDeleteArgs>
    ): CheckSelect<T, Prisma__communityClient<community>, Prisma__communityClient<communityGetPayload<T>>>

    /**
     * Update one Community.
     * @param {communityUpdateArgs} args - Arguments to update one Community.
     * @example
     * // Update one Community
     * const community = await prisma.community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends communityUpdateArgs>(
      args: SelectSubset<T, communityUpdateArgs>
    ): CheckSelect<T, Prisma__communityClient<community>, Prisma__communityClient<communityGetPayload<T>>>

    /**
     * Delete zero or more Communities.
     * @param {communityDeleteManyArgs} args - Arguments to filter Communities to delete.
     * @example
     * // Delete a few Communities
     * const { count } = await prisma.community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends communityDeleteManyArgs>(
      args?: SelectSubset<T, communityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends communityUpdateManyArgs>(
      args: SelectSubset<T, communityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Community.
     * @param {communityUpsertArgs} args - Arguments to update or create a Community.
     * @example
     * // Update or create a Community
     * const community = await prisma.community.upsert({
     *   create: {
     *     // ... data to create a Community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Community we want to update
     *   }
     * })
    **/
    upsert<T extends communityUpsertArgs>(
      args: SelectSubset<T, communityUpsertArgs>
    ): CheckSelect<T, Prisma__communityClient<community>, Prisma__communityClient<communityGetPayload<T>>>

    /**
     * Count the number of Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {communityCountArgs} args - Arguments to filter Communities to count.
     * @example
     * // Count the number of Communities
     * const count = await prisma.community.count({
     *   where: {
     *     // ... the filter for the Communities we want to count
     *   }
     * })
    **/
    count<T extends communityCountArgs>(
      args?: Subset<T, communityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAggregateArgs>(args: Subset<T, CommunityAggregateArgs>): PrismaPromise<GetCommunityAggregateType<T>>

    /**
     * Group by Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityGroupByArgs['orderBy'] }
        : { orderBy?: CommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__communityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    group_community<T extends group_communityFindManyArgs = {}>(args?: Subset<T, group_communityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<group_community>>, PrismaPromise<Array<group_communityGetPayload<T>>>>;

    user_community<T extends user_communityFindManyArgs = {}>(args?: Subset<T, user_communityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_community>>, PrismaPromise<Array<user_communityGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * community findUnique
   */
  export type communityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
    /**
     * Throw an Error if a community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which community to fetch.
     * 
    **/
    where: communityWhereUniqueInput
  }


  /**
   * community findFirst
   */
  export type communityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
    /**
     * Throw an Error if a community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which community to fetch.
     * 
    **/
    where?: communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communities to fetch.
     * 
    **/
    orderBy?: Enumerable<communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for communities.
     * 
    **/
    cursor?: communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of communities.
     * 
    **/
    distinct?: Enumerable<CommunityScalarFieldEnum>
  }


  /**
   * community findMany
   */
  export type communityFindManyArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
    /**
     * Filter, which communities to fetch.
     * 
    **/
    where?: communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of communities to fetch.
     * 
    **/
    orderBy?: Enumerable<communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing communities.
     * 
    **/
    cursor?: communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` communities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommunityScalarFieldEnum>
  }


  /**
   * community create
   */
  export type communityCreateArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
    /**
     * The data needed to create a community.
     * 
    **/
    data: XOR<communityCreateInput, communityUncheckedCreateInput>
  }


  /**
   * community createMany
   */
  export type communityCreateManyArgs = {
    data: Enumerable<communityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * community update
   */
  export type communityUpdateArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
    /**
     * The data needed to update a community.
     * 
    **/
    data: XOR<communityUpdateInput, communityUncheckedUpdateInput>
    /**
     * Choose, which community to update.
     * 
    **/
    where: communityWhereUniqueInput
  }


  /**
   * community updateMany
   */
  export type communityUpdateManyArgs = {
    data: XOR<communityUpdateManyMutationInput, communityUncheckedUpdateManyInput>
    where?: communityWhereInput
  }


  /**
   * community upsert
   */
  export type communityUpsertArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
    /**
     * The filter to search for the community to update in case it exists.
     * 
    **/
    where: communityWhereUniqueInput
    /**
     * In case the community found by the `where` argument doesn't exist, create a new community with this data.
     * 
    **/
    create: XOR<communityCreateInput, communityUncheckedCreateInput>
    /**
     * In case the community was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<communityUpdateInput, communityUncheckedUpdateInput>
  }


  /**
   * community delete
   */
  export type communityDeleteArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
    /**
     * Filter which community to delete.
     * 
    **/
    where: communityWhereUniqueInput
  }


  /**
   * community deleteMany
   */
  export type communityDeleteManyArgs = {
    where?: communityWhereInput
  }


  /**
   * community without action
   */
  export type communityArgs = {
    /**
     * Select specific fields to fetch from the community
     * 
    **/
    select?: communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: communityInclude | null
  }



  /**
   * Model user_community
   */


  export type AggregateUser_community = {
    _count: User_communityCountAggregateOutputType | null
    _avg: User_communityAvgAggregateOutputType | null
    _sum: User_communitySumAggregateOutputType | null
    _min: User_communityMinAggregateOutputType | null
    _max: User_communityMaxAggregateOutputType | null
  }

  export type User_communityAvgAggregateOutputType = {
    id: number | null
    community_id: number | null
  }

  export type User_communitySumAggregateOutputType = {
    id: number | null
    community_id: number | null
  }

  export type User_communityMinAggregateOutputType = {
    id: number | null
    community_id: number | null
    user_uid: string | null
  }

  export type User_communityMaxAggregateOutputType = {
    id: number | null
    community_id: number | null
    user_uid: string | null
  }

  export type User_communityCountAggregateOutputType = {
    id: number
    community_id: number
    user_uid: number
    _all: number
  }


  export type User_communityAvgAggregateInputType = {
    id?: true
    community_id?: true
  }

  export type User_communitySumAggregateInputType = {
    id?: true
    community_id?: true
  }

  export type User_communityMinAggregateInputType = {
    id?: true
    community_id?: true
    user_uid?: true
  }

  export type User_communityMaxAggregateInputType = {
    id?: true
    community_id?: true
    user_uid?: true
  }

  export type User_communityCountAggregateInputType = {
    id?: true
    community_id?: true
    user_uid?: true
    _all?: true
  }

  export type User_communityAggregateArgs = {
    /**
     * Filter which user_community to aggregate.
     * 
    **/
    where?: user_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<user_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_communities
    **/
    _count?: true | User_communityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_communityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_communitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_communityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_communityMaxAggregateInputType
  }

  export type GetUser_communityAggregateType<T extends User_communityAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_community]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_community[P]>
      : GetScalarType<T[P], AggregateUser_community[P]>
  }




  export type User_communityGroupByArgs = {
    where?: user_communityWhereInput
    orderBy?: Enumerable<user_communityOrderByWithAggregationInput>
    by: Array<User_communityScalarFieldEnum>
    having?: user_communityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_communityCountAggregateInputType | true
    _avg?: User_communityAvgAggregateInputType
    _sum?: User_communitySumAggregateInputType
    _min?: User_communityMinAggregateInputType
    _max?: User_communityMaxAggregateInputType
  }


  export type User_communityGroupByOutputType = {
    id: number
    community_id: number | null
    user_uid: string | null
    _count: User_communityCountAggregateOutputType | null
    _avg: User_communityAvgAggregateOutputType | null
    _sum: User_communitySumAggregateOutputType | null
    _min: User_communityMinAggregateOutputType | null
    _max: User_communityMaxAggregateOutputType | null
  }

  type GetUser_communityGroupByPayload<T extends User_communityGroupByArgs> = Promise<
    Array<
      PickArray<User_communityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_communityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_communityGroupByOutputType[P]>
            : GetScalarType<T[P], User_communityGroupByOutputType[P]>
        }
      >
    >


  export type user_communitySelect = {
    id?: boolean
    community_id?: boolean
    user_uid?: boolean
    community?: boolean | communityArgs
    users?: boolean | usersArgs
  }

  export type user_communityInclude = {
    community?: boolean | communityArgs
    users?: boolean | usersArgs
  }

  export type user_communityGetPayload<
    S extends boolean | null | undefined | user_communityArgs,
    U = keyof S
      > = S extends true
        ? user_community
    : S extends undefined
    ? never
    : S extends user_communityArgs | user_communityFindManyArgs
    ?'include' extends U
    ? user_community  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'community'
        ? communityGetPayload<S['include'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user_community ?user_community [P]
  : 
          P extends 'community'
        ? communityGetPayload<S['select'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> | null : never
  } 
    : user_community
  : user_community


  type user_communityCountArgs = Merge<
    Omit<user_communityFindManyArgs, 'select' | 'include'> & {
      select?: User_communityCountAggregateInputType | true
    }
  >

  export interface user_communityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_community that matches the filter.
     * @param {user_communityFindUniqueArgs} args - Arguments to find a User_community
     * @example
     * // Get one User_community
     * const user_community = await prisma.user_community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_communityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_communityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_community'> extends True ? CheckSelect<T, Prisma__user_communityClient<user_community>, Prisma__user_communityClient<user_communityGetPayload<T>>> : CheckSelect<T, Prisma__user_communityClient<user_community | null >, Prisma__user_communityClient<user_communityGetPayload<T> | null >>

    /**
     * Find the first User_community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_communityFindFirstArgs} args - Arguments to find a User_community
     * @example
     * // Get one User_community
     * const user_community = await prisma.user_community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_communityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_communityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_community'> extends True ? CheckSelect<T, Prisma__user_communityClient<user_community>, Prisma__user_communityClient<user_communityGetPayload<T>>> : CheckSelect<T, Prisma__user_communityClient<user_community | null >, Prisma__user_communityClient<user_communityGetPayload<T> | null >>

    /**
     * Find zero or more User_communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_communityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_communities
     * const user_communities = await prisma.user_community.findMany()
     * 
     * // Get first 10 User_communities
     * const user_communities = await prisma.user_community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_communityWithIdOnly = await prisma.user_community.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_communityFindManyArgs>(
      args?: SelectSubset<T, user_communityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_community>>, PrismaPromise<Array<user_communityGetPayload<T>>>>

    /**
     * Create a User_community.
     * @param {user_communityCreateArgs} args - Arguments to create a User_community.
     * @example
     * // Create one User_community
     * const User_community = await prisma.user_community.create({
     *   data: {
     *     // ... data to create a User_community
     *   }
     * })
     * 
    **/
    create<T extends user_communityCreateArgs>(
      args: SelectSubset<T, user_communityCreateArgs>
    ): CheckSelect<T, Prisma__user_communityClient<user_community>, Prisma__user_communityClient<user_communityGetPayload<T>>>

    /**
     * Create many User_communities.
     *     @param {user_communityCreateManyArgs} args - Arguments to create many User_communities.
     *     @example
     *     // Create many User_communities
     *     const user_community = await prisma.user_community.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_communityCreateManyArgs>(
      args?: SelectSubset<T, user_communityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_community.
     * @param {user_communityDeleteArgs} args - Arguments to delete one User_community.
     * @example
     * // Delete one User_community
     * const User_community = await prisma.user_community.delete({
     *   where: {
     *     // ... filter to delete one User_community
     *   }
     * })
     * 
    **/
    delete<T extends user_communityDeleteArgs>(
      args: SelectSubset<T, user_communityDeleteArgs>
    ): CheckSelect<T, Prisma__user_communityClient<user_community>, Prisma__user_communityClient<user_communityGetPayload<T>>>

    /**
     * Update one User_community.
     * @param {user_communityUpdateArgs} args - Arguments to update one User_community.
     * @example
     * // Update one User_community
     * const user_community = await prisma.user_community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_communityUpdateArgs>(
      args: SelectSubset<T, user_communityUpdateArgs>
    ): CheckSelect<T, Prisma__user_communityClient<user_community>, Prisma__user_communityClient<user_communityGetPayload<T>>>

    /**
     * Delete zero or more User_communities.
     * @param {user_communityDeleteManyArgs} args - Arguments to filter User_communities to delete.
     * @example
     * // Delete a few User_communities
     * const { count } = await prisma.user_community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_communityDeleteManyArgs>(
      args?: SelectSubset<T, user_communityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_communityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_communities
     * const user_community = await prisma.user_community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_communityUpdateManyArgs>(
      args: SelectSubset<T, user_communityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_community.
     * @param {user_communityUpsertArgs} args - Arguments to update or create a User_community.
     * @example
     * // Update or create a User_community
     * const user_community = await prisma.user_community.upsert({
     *   create: {
     *     // ... data to create a User_community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_community we want to update
     *   }
     * })
    **/
    upsert<T extends user_communityUpsertArgs>(
      args: SelectSubset<T, user_communityUpsertArgs>
    ): CheckSelect<T, Prisma__user_communityClient<user_community>, Prisma__user_communityClient<user_communityGetPayload<T>>>

    /**
     * Count the number of User_communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_communityCountArgs} args - Arguments to filter User_communities to count.
     * @example
     * // Count the number of User_communities
     * const count = await prisma.user_community.count({
     *   where: {
     *     // ... the filter for the User_communities we want to count
     *   }
     * })
    **/
    count<T extends user_communityCountArgs>(
      args?: Subset<T, user_communityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_communityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_communityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_communityAggregateArgs>(args: Subset<T, User_communityAggregateArgs>): PrismaPromise<GetUser_communityAggregateType<T>>

    /**
     * Group by User_community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_communityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_communityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_communityGroupByArgs['orderBy'] }
        : { orderBy?: User_communityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_communityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_communityGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_communityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    community<T extends communityArgs = {}>(args?: Subset<T, communityArgs>): CheckSelect<T, Prisma__communityClient<community | null >, Prisma__communityClient<communityGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_community findUnique
   */
  export type user_communityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
    /**
     * Throw an Error if a user_community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_community to fetch.
     * 
    **/
    where: user_communityWhereUniqueInput
  }


  /**
   * user_community findFirst
   */
  export type user_communityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
    /**
     * Throw an Error if a user_community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_community to fetch.
     * 
    **/
    where?: user_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<user_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_communities.
     * 
    **/
    cursor?: user_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_communities.
     * 
    **/
    distinct?: Enumerable<User_communityScalarFieldEnum>
  }


  /**
   * user_community findMany
   */
  export type user_communityFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
    /**
     * Filter, which user_communities to fetch.
     * 
    **/
    where?: user_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<user_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_communities.
     * 
    **/
    cursor?: user_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_communities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_communityScalarFieldEnum>
  }


  /**
   * user_community create
   */
  export type user_communityCreateArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
    /**
     * The data needed to create a user_community.
     * 
    **/
    data: XOR<user_communityCreateInput, user_communityUncheckedCreateInput>
  }


  /**
   * user_community createMany
   */
  export type user_communityCreateManyArgs = {
    data: Enumerable<user_communityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_community update
   */
  export type user_communityUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
    /**
     * The data needed to update a user_community.
     * 
    **/
    data: XOR<user_communityUpdateInput, user_communityUncheckedUpdateInput>
    /**
     * Choose, which user_community to update.
     * 
    **/
    where: user_communityWhereUniqueInput
  }


  /**
   * user_community updateMany
   */
  export type user_communityUpdateManyArgs = {
    data: XOR<user_communityUpdateManyMutationInput, user_communityUncheckedUpdateManyInput>
    where?: user_communityWhereInput
  }


  /**
   * user_community upsert
   */
  export type user_communityUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
    /**
     * The filter to search for the user_community to update in case it exists.
     * 
    **/
    where: user_communityWhereUniqueInput
    /**
     * In case the user_community found by the `where` argument doesn't exist, create a new user_community with this data.
     * 
    **/
    create: XOR<user_communityCreateInput, user_communityUncheckedCreateInput>
    /**
     * In case the user_community was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_communityUpdateInput, user_communityUncheckedUpdateInput>
  }


  /**
   * user_community delete
   */
  export type user_communityDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
    /**
     * Filter which user_community to delete.
     * 
    **/
    where: user_communityWhereUniqueInput
  }


  /**
   * user_community deleteMany
   */
  export type user_communityDeleteManyArgs = {
    where?: user_communityWhereInput
  }


  /**
   * user_community without action
   */
  export type user_communityArgs = {
    /**
     * Select specific fields to fetch from the user_community
     * 
    **/
    select?: user_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_communityInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    firebase_uid: string | null
    email: string | null
    name: string | null
    last_name: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    firebase_uid: string | null
    email: string | null
    name: string | null
    last_name: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    firebase_uid: number
    email: number
    name: number
    last_name: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    firebase_uid?: true
    email?: true
    name?: true
    last_name?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    firebase_uid?: true
    email?: true
    name?: true
    last_name?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    firebase_uid?: true
    email?: true
    name?: true
    last_name?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    firebase_uid: string
    email: string | null
    name: string | null
    last_name: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    firebase_uid?: boolean
    email?: boolean
    name?: boolean
    last_name?: boolean
    community?: boolean | communityFindManyArgs
    user_community?: boolean | user_communityFindManyArgs
    user_group_community?: boolean | user_group_communityFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersInclude = {
    community?: boolean | communityFindManyArgs
    user_community?: boolean | user_communityFindManyArgs
    user_group_community?: boolean | user_group_communityFindManyArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'community'
        ? Array < communityGetPayload<S['include'][P]>>  :
        P extends 'user_community'
        ? Array < user_communityGetPayload<S['include'][P]>>  :
        P extends 'user_group_community'
        ? Array < user_group_communityGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'community'
        ? Array < communityGetPayload<S['select'][P]>>  :
        P extends 'user_community'
        ? Array < user_communityGetPayload<S['select'][P]>>  :
        P extends 'user_group_community'
        ? Array < user_group_communityGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? UsersCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    community<T extends communityFindManyArgs = {}>(args?: Subset<T, communityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<community>>, PrismaPromise<Array<communityGetPayload<T>>>>;

    user_community<T extends user_communityFindManyArgs = {}>(args?: Subset<T, user_communityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_community>>, PrismaPromise<Array<user_communityGetPayload<T>>>>;

    user_group_community<T extends user_group_communityFindManyArgs = {}>(args?: Subset<T, user_group_communityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_group_community>>, PrismaPromise<Array<user_group_communityGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model group_community
   */


  export type AggregateGroup_community = {
    _count: Group_communityCountAggregateOutputType | null
    _avg: Group_communityAvgAggregateOutputType | null
    _sum: Group_communitySumAggregateOutputType | null
    _min: Group_communityMinAggregateOutputType | null
    _max: Group_communityMaxAggregateOutputType | null
  }

  export type Group_communityAvgAggregateOutputType = {
    id: number | null
    community_id: number | null
    max_members: number | null
    with_password: number | null
  }

  export type Group_communitySumAggregateOutputType = {
    id: number | null
    community_id: number | null
    max_members: number | null
    with_password: number | null
  }

  export type Group_communityMinAggregateOutputType = {
    id: number | null
    community_id: number | null
    title: string | null
    description: string | null
    max_members: number | null
    with_password: number | null
    password: string | null
  }

  export type Group_communityMaxAggregateOutputType = {
    id: number | null
    community_id: number | null
    title: string | null
    description: string | null
    max_members: number | null
    with_password: number | null
    password: string | null
  }

  export type Group_communityCountAggregateOutputType = {
    id: number
    community_id: number
    title: number
    description: number
    max_members: number
    with_password: number
    password: number
    _all: number
  }


  export type Group_communityAvgAggregateInputType = {
    id?: true
    community_id?: true
    max_members?: true
    with_password?: true
  }

  export type Group_communitySumAggregateInputType = {
    id?: true
    community_id?: true
    max_members?: true
    with_password?: true
  }

  export type Group_communityMinAggregateInputType = {
    id?: true
    community_id?: true
    title?: true
    description?: true
    max_members?: true
    with_password?: true
    password?: true
  }

  export type Group_communityMaxAggregateInputType = {
    id?: true
    community_id?: true
    title?: true
    description?: true
    max_members?: true
    with_password?: true
    password?: true
  }

  export type Group_communityCountAggregateInputType = {
    id?: true
    community_id?: true
    title?: true
    description?: true
    max_members?: true
    with_password?: true
    password?: true
    _all?: true
  }

  export type Group_communityAggregateArgs = {
    /**
     * Filter which group_community to aggregate.
     * 
    **/
    where?: group_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of group_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<group_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: group_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` group_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` group_communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned group_communities
    **/
    _count?: true | Group_communityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Group_communityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Group_communitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Group_communityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Group_communityMaxAggregateInputType
  }

  export type GetGroup_communityAggregateType<T extends Group_communityAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup_community]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup_community[P]>
      : GetScalarType<T[P], AggregateGroup_community[P]>
  }




  export type Group_communityGroupByArgs = {
    where?: group_communityWhereInput
    orderBy?: Enumerable<group_communityOrderByWithAggregationInput>
    by: Array<Group_communityScalarFieldEnum>
    having?: group_communityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Group_communityCountAggregateInputType | true
    _avg?: Group_communityAvgAggregateInputType
    _sum?: Group_communitySumAggregateInputType
    _min?: Group_communityMinAggregateInputType
    _max?: Group_communityMaxAggregateInputType
  }


  export type Group_communityGroupByOutputType = {
    id: number
    community_id: number | null
    title: string | null
    description: string | null
    max_members: number | null
    with_password: number | null
    password: string | null
    _count: Group_communityCountAggregateOutputType | null
    _avg: Group_communityAvgAggregateOutputType | null
    _sum: Group_communitySumAggregateOutputType | null
    _min: Group_communityMinAggregateOutputType | null
    _max: Group_communityMaxAggregateOutputType | null
  }

  type GetGroup_communityGroupByPayload<T extends Group_communityGroupByArgs> = Promise<
    Array<
      PickArray<Group_communityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Group_communityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Group_communityGroupByOutputType[P]>
            : GetScalarType<T[P], Group_communityGroupByOutputType[P]>
        }
      >
    >


  export type group_communitySelect = {
    id?: boolean
    community_id?: boolean
    title?: boolean
    description?: boolean
    max_members?: boolean
    with_password?: boolean
    password?: boolean
    community?: boolean | communityArgs
    user_group_community?: boolean | user_group_communityFindManyArgs
    _count?: boolean | Group_communityCountOutputTypeArgs
  }

  export type group_communityInclude = {
    community?: boolean | communityArgs
    user_group_community?: boolean | user_group_communityFindManyArgs
    _count?: boolean | Group_communityCountOutputTypeArgs
  }

  export type group_communityGetPayload<
    S extends boolean | null | undefined | group_communityArgs,
    U = keyof S
      > = S extends true
        ? group_community
    : S extends undefined
    ? never
    : S extends group_communityArgs | group_communityFindManyArgs
    ?'include' extends U
    ? group_community  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'community'
        ? communityGetPayload<S['include'][P]> | null :
        P extends 'user_group_community'
        ? Array < user_group_communityGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Group_communityCountOutputTypeGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof group_community ?group_community [P]
  : 
          P extends 'community'
        ? communityGetPayload<S['select'][P]> | null :
        P extends 'user_group_community'
        ? Array < user_group_communityGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Group_communityCountOutputTypeGetPayload<S['select'][P]> : never
  } 
    : group_community
  : group_community


  type group_communityCountArgs = Merge<
    Omit<group_communityFindManyArgs, 'select' | 'include'> & {
      select?: Group_communityCountAggregateInputType | true
    }
  >

  export interface group_communityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Group_community that matches the filter.
     * @param {group_communityFindUniqueArgs} args - Arguments to find a Group_community
     * @example
     * // Get one Group_community
     * const group_community = await prisma.group_community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends group_communityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, group_communityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'group_community'> extends True ? CheckSelect<T, Prisma__group_communityClient<group_community>, Prisma__group_communityClient<group_communityGetPayload<T>>> : CheckSelect<T, Prisma__group_communityClient<group_community | null >, Prisma__group_communityClient<group_communityGetPayload<T> | null >>

    /**
     * Find the first Group_community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {group_communityFindFirstArgs} args - Arguments to find a Group_community
     * @example
     * // Get one Group_community
     * const group_community = await prisma.group_community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends group_communityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, group_communityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'group_community'> extends True ? CheckSelect<T, Prisma__group_communityClient<group_community>, Prisma__group_communityClient<group_communityGetPayload<T>>> : CheckSelect<T, Prisma__group_communityClient<group_community | null >, Prisma__group_communityClient<group_communityGetPayload<T> | null >>

    /**
     * Find zero or more Group_communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {group_communityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Group_communities
     * const group_communities = await prisma.group_community.findMany()
     * 
     * // Get first 10 Group_communities
     * const group_communities = await prisma.group_community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const group_communityWithIdOnly = await prisma.group_community.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends group_communityFindManyArgs>(
      args?: SelectSubset<T, group_communityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<group_community>>, PrismaPromise<Array<group_communityGetPayload<T>>>>

    /**
     * Create a Group_community.
     * @param {group_communityCreateArgs} args - Arguments to create a Group_community.
     * @example
     * // Create one Group_community
     * const Group_community = await prisma.group_community.create({
     *   data: {
     *     // ... data to create a Group_community
     *   }
     * })
     * 
    **/
    create<T extends group_communityCreateArgs>(
      args: SelectSubset<T, group_communityCreateArgs>
    ): CheckSelect<T, Prisma__group_communityClient<group_community>, Prisma__group_communityClient<group_communityGetPayload<T>>>

    /**
     * Create many Group_communities.
     *     @param {group_communityCreateManyArgs} args - Arguments to create many Group_communities.
     *     @example
     *     // Create many Group_communities
     *     const group_community = await prisma.group_community.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends group_communityCreateManyArgs>(
      args?: SelectSubset<T, group_communityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Group_community.
     * @param {group_communityDeleteArgs} args - Arguments to delete one Group_community.
     * @example
     * // Delete one Group_community
     * const Group_community = await prisma.group_community.delete({
     *   where: {
     *     // ... filter to delete one Group_community
     *   }
     * })
     * 
    **/
    delete<T extends group_communityDeleteArgs>(
      args: SelectSubset<T, group_communityDeleteArgs>
    ): CheckSelect<T, Prisma__group_communityClient<group_community>, Prisma__group_communityClient<group_communityGetPayload<T>>>

    /**
     * Update one Group_community.
     * @param {group_communityUpdateArgs} args - Arguments to update one Group_community.
     * @example
     * // Update one Group_community
     * const group_community = await prisma.group_community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends group_communityUpdateArgs>(
      args: SelectSubset<T, group_communityUpdateArgs>
    ): CheckSelect<T, Prisma__group_communityClient<group_community>, Prisma__group_communityClient<group_communityGetPayload<T>>>

    /**
     * Delete zero or more Group_communities.
     * @param {group_communityDeleteManyArgs} args - Arguments to filter Group_communities to delete.
     * @example
     * // Delete a few Group_communities
     * const { count } = await prisma.group_community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends group_communityDeleteManyArgs>(
      args?: SelectSubset<T, group_communityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Group_communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {group_communityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Group_communities
     * const group_community = await prisma.group_community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends group_communityUpdateManyArgs>(
      args: SelectSubset<T, group_communityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Group_community.
     * @param {group_communityUpsertArgs} args - Arguments to update or create a Group_community.
     * @example
     * // Update or create a Group_community
     * const group_community = await prisma.group_community.upsert({
     *   create: {
     *     // ... data to create a Group_community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group_community we want to update
     *   }
     * })
    **/
    upsert<T extends group_communityUpsertArgs>(
      args: SelectSubset<T, group_communityUpsertArgs>
    ): CheckSelect<T, Prisma__group_communityClient<group_community>, Prisma__group_communityClient<group_communityGetPayload<T>>>

    /**
     * Count the number of Group_communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {group_communityCountArgs} args - Arguments to filter Group_communities to count.
     * @example
     * // Count the number of Group_communities
     * const count = await prisma.group_community.count({
     *   where: {
     *     // ... the filter for the Group_communities we want to count
     *   }
     * })
    **/
    count<T extends group_communityCountArgs>(
      args?: Subset<T, group_communityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Group_communityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group_community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_communityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Group_communityAggregateArgs>(args: Subset<T, Group_communityAggregateArgs>): PrismaPromise<GetGroup_communityAggregateType<T>>

    /**
     * Group by Group_community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Group_communityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Group_communityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Group_communityGroupByArgs['orderBy'] }
        : { orderBy?: Group_communityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Group_communityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroup_communityGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for group_community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__group_communityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    community<T extends communityArgs = {}>(args?: Subset<T, communityArgs>): CheckSelect<T, Prisma__communityClient<community | null >, Prisma__communityClient<communityGetPayload<T> | null >>;

    user_group_community<T extends user_group_communityFindManyArgs = {}>(args?: Subset<T, user_group_communityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_group_community>>, PrismaPromise<Array<user_group_communityGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * group_community findUnique
   */
  export type group_communityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
    /**
     * Throw an Error if a group_community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which group_community to fetch.
     * 
    **/
    where: group_communityWhereUniqueInput
  }


  /**
   * group_community findFirst
   */
  export type group_communityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
    /**
     * Throw an Error if a group_community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which group_community to fetch.
     * 
    **/
    where?: group_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of group_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<group_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for group_communities.
     * 
    **/
    cursor?: group_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` group_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` group_communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of group_communities.
     * 
    **/
    distinct?: Enumerable<Group_communityScalarFieldEnum>
  }


  /**
   * group_community findMany
   */
  export type group_communityFindManyArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
    /**
     * Filter, which group_communities to fetch.
     * 
    **/
    where?: group_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of group_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<group_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing group_communities.
     * 
    **/
    cursor?: group_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` group_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` group_communities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Group_communityScalarFieldEnum>
  }


  /**
   * group_community create
   */
  export type group_communityCreateArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
    /**
     * The data needed to create a group_community.
     * 
    **/
    data: XOR<group_communityCreateInput, group_communityUncheckedCreateInput>
  }


  /**
   * group_community createMany
   */
  export type group_communityCreateManyArgs = {
    data: Enumerable<group_communityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * group_community update
   */
  export type group_communityUpdateArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
    /**
     * The data needed to update a group_community.
     * 
    **/
    data: XOR<group_communityUpdateInput, group_communityUncheckedUpdateInput>
    /**
     * Choose, which group_community to update.
     * 
    **/
    where: group_communityWhereUniqueInput
  }


  /**
   * group_community updateMany
   */
  export type group_communityUpdateManyArgs = {
    data: XOR<group_communityUpdateManyMutationInput, group_communityUncheckedUpdateManyInput>
    where?: group_communityWhereInput
  }


  /**
   * group_community upsert
   */
  export type group_communityUpsertArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
    /**
     * The filter to search for the group_community to update in case it exists.
     * 
    **/
    where: group_communityWhereUniqueInput
    /**
     * In case the group_community found by the `where` argument doesn't exist, create a new group_community with this data.
     * 
    **/
    create: XOR<group_communityCreateInput, group_communityUncheckedCreateInput>
    /**
     * In case the group_community was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<group_communityUpdateInput, group_communityUncheckedUpdateInput>
  }


  /**
   * group_community delete
   */
  export type group_communityDeleteArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
    /**
     * Filter which group_community to delete.
     * 
    **/
    where: group_communityWhereUniqueInput
  }


  /**
   * group_community deleteMany
   */
  export type group_communityDeleteManyArgs = {
    where?: group_communityWhereInput
  }


  /**
   * group_community without action
   */
  export type group_communityArgs = {
    /**
     * Select specific fields to fetch from the group_community
     * 
    **/
    select?: group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: group_communityInclude | null
  }



  /**
   * Model user_group_community
   */


  export type AggregateUser_group_community = {
    _count: User_group_communityCountAggregateOutputType | null
    _avg: User_group_communityAvgAggregateOutputType | null
    _sum: User_group_communitySumAggregateOutputType | null
    _min: User_group_communityMinAggregateOutputType | null
    _max: User_group_communityMaxAggregateOutputType | null
  }

  export type User_group_communityAvgAggregateOutputType = {
    id: number | null
    group_id: number | null
  }

  export type User_group_communitySumAggregateOutputType = {
    id: number | null
    group_id: number | null
  }

  export type User_group_communityMinAggregateOutputType = {
    id: number | null
    group_id: number | null
    user_uid: string | null
  }

  export type User_group_communityMaxAggregateOutputType = {
    id: number | null
    group_id: number | null
    user_uid: string | null
  }

  export type User_group_communityCountAggregateOutputType = {
    id: number
    group_id: number
    user_uid: number
    _all: number
  }


  export type User_group_communityAvgAggregateInputType = {
    id?: true
    group_id?: true
  }

  export type User_group_communitySumAggregateInputType = {
    id?: true
    group_id?: true
  }

  export type User_group_communityMinAggregateInputType = {
    id?: true
    group_id?: true
    user_uid?: true
  }

  export type User_group_communityMaxAggregateInputType = {
    id?: true
    group_id?: true
    user_uid?: true
  }

  export type User_group_communityCountAggregateInputType = {
    id?: true
    group_id?: true
    user_uid?: true
    _all?: true
  }

  export type User_group_communityAggregateArgs = {
    /**
     * Filter which user_group_community to aggregate.
     * 
    **/
    where?: user_group_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_group_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<user_group_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_group_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_group_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_group_communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_group_communities
    **/
    _count?: true | User_group_communityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_group_communityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_group_communitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_group_communityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_group_communityMaxAggregateInputType
  }

  export type GetUser_group_communityAggregateType<T extends User_group_communityAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_group_community]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_group_community[P]>
      : GetScalarType<T[P], AggregateUser_group_community[P]>
  }




  export type User_group_communityGroupByArgs = {
    where?: user_group_communityWhereInput
    orderBy?: Enumerable<user_group_communityOrderByWithAggregationInput>
    by: Array<User_group_communityScalarFieldEnum>
    having?: user_group_communityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_group_communityCountAggregateInputType | true
    _avg?: User_group_communityAvgAggregateInputType
    _sum?: User_group_communitySumAggregateInputType
    _min?: User_group_communityMinAggregateInputType
    _max?: User_group_communityMaxAggregateInputType
  }


  export type User_group_communityGroupByOutputType = {
    id: number
    group_id: number | null
    user_uid: string | null
    _count: User_group_communityCountAggregateOutputType | null
    _avg: User_group_communityAvgAggregateOutputType | null
    _sum: User_group_communitySumAggregateOutputType | null
    _min: User_group_communityMinAggregateOutputType | null
    _max: User_group_communityMaxAggregateOutputType | null
  }

  type GetUser_group_communityGroupByPayload<T extends User_group_communityGroupByArgs> = Promise<
    Array<
      PickArray<User_group_communityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_group_communityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_group_communityGroupByOutputType[P]>
            : GetScalarType<T[P], User_group_communityGroupByOutputType[P]>
        }
      >
    >


  export type user_group_communitySelect = {
    id?: boolean
    group_id?: boolean
    user_uid?: boolean
    group_community?: boolean | group_communityArgs
    users?: boolean | usersArgs
  }

  export type user_group_communityInclude = {
    group_community?: boolean | group_communityArgs
    users?: boolean | usersArgs
  }

  export type user_group_communityGetPayload<
    S extends boolean | null | undefined | user_group_communityArgs,
    U = keyof S
      > = S extends true
        ? user_group_community
    : S extends undefined
    ? never
    : S extends user_group_communityArgs | user_group_communityFindManyArgs
    ?'include' extends U
    ? user_group_community  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'group_community'
        ? group_communityGetPayload<S['include'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof user_group_community ?user_group_community [P]
  : 
          P extends 'group_community'
        ? group_communityGetPayload<S['select'][P]> | null :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> | null : never
  } 
    : user_group_community
  : user_group_community


  type user_group_communityCountArgs = Merge<
    Omit<user_group_communityFindManyArgs, 'select' | 'include'> & {
      select?: User_group_communityCountAggregateInputType | true
    }
  >

  export interface user_group_communityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User_group_community that matches the filter.
     * @param {user_group_communityFindUniqueArgs} args - Arguments to find a User_group_community
     * @example
     * // Get one User_group_community
     * const user_group_community = await prisma.user_group_community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_group_communityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_group_communityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_group_community'> extends True ? CheckSelect<T, Prisma__user_group_communityClient<user_group_community>, Prisma__user_group_communityClient<user_group_communityGetPayload<T>>> : CheckSelect<T, Prisma__user_group_communityClient<user_group_community | null >, Prisma__user_group_communityClient<user_group_communityGetPayload<T> | null >>

    /**
     * Find the first User_group_community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_communityFindFirstArgs} args - Arguments to find a User_group_community
     * @example
     * // Get one User_group_community
     * const user_group_community = await prisma.user_group_community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_group_communityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_group_communityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_group_community'> extends True ? CheckSelect<T, Prisma__user_group_communityClient<user_group_community>, Prisma__user_group_communityClient<user_group_communityGetPayload<T>>> : CheckSelect<T, Prisma__user_group_communityClient<user_group_community | null >, Prisma__user_group_communityClient<user_group_communityGetPayload<T> | null >>

    /**
     * Find zero or more User_group_communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_communityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_group_communities
     * const user_group_communities = await prisma.user_group_community.findMany()
     * 
     * // Get first 10 User_group_communities
     * const user_group_communities = await prisma.user_group_community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_group_communityWithIdOnly = await prisma.user_group_community.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends user_group_communityFindManyArgs>(
      args?: SelectSubset<T, user_group_communityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_group_community>>, PrismaPromise<Array<user_group_communityGetPayload<T>>>>

    /**
     * Create a User_group_community.
     * @param {user_group_communityCreateArgs} args - Arguments to create a User_group_community.
     * @example
     * // Create one User_group_community
     * const User_group_community = await prisma.user_group_community.create({
     *   data: {
     *     // ... data to create a User_group_community
     *   }
     * })
     * 
    **/
    create<T extends user_group_communityCreateArgs>(
      args: SelectSubset<T, user_group_communityCreateArgs>
    ): CheckSelect<T, Prisma__user_group_communityClient<user_group_community>, Prisma__user_group_communityClient<user_group_communityGetPayload<T>>>

    /**
     * Create many User_group_communities.
     *     @param {user_group_communityCreateManyArgs} args - Arguments to create many User_group_communities.
     *     @example
     *     // Create many User_group_communities
     *     const user_group_community = await prisma.user_group_community.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_group_communityCreateManyArgs>(
      args?: SelectSubset<T, user_group_communityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_group_community.
     * @param {user_group_communityDeleteArgs} args - Arguments to delete one User_group_community.
     * @example
     * // Delete one User_group_community
     * const User_group_community = await prisma.user_group_community.delete({
     *   where: {
     *     // ... filter to delete one User_group_community
     *   }
     * })
     * 
    **/
    delete<T extends user_group_communityDeleteArgs>(
      args: SelectSubset<T, user_group_communityDeleteArgs>
    ): CheckSelect<T, Prisma__user_group_communityClient<user_group_community>, Prisma__user_group_communityClient<user_group_communityGetPayload<T>>>

    /**
     * Update one User_group_community.
     * @param {user_group_communityUpdateArgs} args - Arguments to update one User_group_community.
     * @example
     * // Update one User_group_community
     * const user_group_community = await prisma.user_group_community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_group_communityUpdateArgs>(
      args: SelectSubset<T, user_group_communityUpdateArgs>
    ): CheckSelect<T, Prisma__user_group_communityClient<user_group_community>, Prisma__user_group_communityClient<user_group_communityGetPayload<T>>>

    /**
     * Delete zero or more User_group_communities.
     * @param {user_group_communityDeleteManyArgs} args - Arguments to filter User_group_communities to delete.
     * @example
     * // Delete a few User_group_communities
     * const { count } = await prisma.user_group_community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_group_communityDeleteManyArgs>(
      args?: SelectSubset<T, user_group_communityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_group_communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_communityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_group_communities
     * const user_group_community = await prisma.user_group_community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_group_communityUpdateManyArgs>(
      args: SelectSubset<T, user_group_communityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_group_community.
     * @param {user_group_communityUpsertArgs} args - Arguments to update or create a User_group_community.
     * @example
     * // Update or create a User_group_community
     * const user_group_community = await prisma.user_group_community.upsert({
     *   create: {
     *     // ... data to create a User_group_community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_group_community we want to update
     *   }
     * })
    **/
    upsert<T extends user_group_communityUpsertArgs>(
      args: SelectSubset<T, user_group_communityUpsertArgs>
    ): CheckSelect<T, Prisma__user_group_communityClient<user_group_community>, Prisma__user_group_communityClient<user_group_communityGetPayload<T>>>

    /**
     * Count the number of User_group_communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_group_communityCountArgs} args - Arguments to filter User_group_communities to count.
     * @example
     * // Count the number of User_group_communities
     * const count = await prisma.user_group_community.count({
     *   where: {
     *     // ... the filter for the User_group_communities we want to count
     *   }
     * })
    **/
    count<T extends user_group_communityCountArgs>(
      args?: Subset<T, user_group_communityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_group_communityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_group_community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_group_communityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_group_communityAggregateArgs>(args: Subset<T, User_group_communityAggregateArgs>): PrismaPromise<GetUser_group_communityAggregateType<T>>

    /**
     * Group by User_group_community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_group_communityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_group_communityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_group_communityGroupByArgs['orderBy'] }
        : { orderBy?: User_group_communityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_group_communityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_group_communityGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_group_community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_group_communityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    group_community<T extends group_communityArgs = {}>(args?: Subset<T, group_communityArgs>): CheckSelect<T, Prisma__group_communityClient<group_community | null >, Prisma__group_communityClient<group_communityGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * user_group_community findUnique
   */
  export type user_group_communityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
    /**
     * Throw an Error if a user_group_community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_group_community to fetch.
     * 
    **/
    where: user_group_communityWhereUniqueInput
  }


  /**
   * user_group_community findFirst
   */
  export type user_group_communityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
    /**
     * Throw an Error if a user_group_community can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which user_group_community to fetch.
     * 
    **/
    where?: user_group_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_group_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<user_group_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_group_communities.
     * 
    **/
    cursor?: user_group_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_group_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_group_communities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_group_communities.
     * 
    **/
    distinct?: Enumerable<User_group_communityScalarFieldEnum>
  }


  /**
   * user_group_community findMany
   */
  export type user_group_communityFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
    /**
     * Filter, which user_group_communities to fetch.
     * 
    **/
    where?: user_group_communityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_group_communities to fetch.
     * 
    **/
    orderBy?: Enumerable<user_group_communityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_group_communities.
     * 
    **/
    cursor?: user_group_communityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_group_communities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_group_communities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_group_communityScalarFieldEnum>
  }


  /**
   * user_group_community create
   */
  export type user_group_communityCreateArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
    /**
     * The data needed to create a user_group_community.
     * 
    **/
    data: XOR<user_group_communityCreateInput, user_group_communityUncheckedCreateInput>
  }


  /**
   * user_group_community createMany
   */
  export type user_group_communityCreateManyArgs = {
    data: Enumerable<user_group_communityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_group_community update
   */
  export type user_group_communityUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
    /**
     * The data needed to update a user_group_community.
     * 
    **/
    data: XOR<user_group_communityUpdateInput, user_group_communityUncheckedUpdateInput>
    /**
     * Choose, which user_group_community to update.
     * 
    **/
    where: user_group_communityWhereUniqueInput
  }


  /**
   * user_group_community updateMany
   */
  export type user_group_communityUpdateManyArgs = {
    data: XOR<user_group_communityUpdateManyMutationInput, user_group_communityUncheckedUpdateManyInput>
    where?: user_group_communityWhereInput
  }


  /**
   * user_group_community upsert
   */
  export type user_group_communityUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
    /**
     * The filter to search for the user_group_community to update in case it exists.
     * 
    **/
    where: user_group_communityWhereUniqueInput
    /**
     * In case the user_group_community found by the `where` argument doesn't exist, create a new user_group_community with this data.
     * 
    **/
    create: XOR<user_group_communityCreateInput, user_group_communityUncheckedCreateInput>
    /**
     * In case the user_group_community was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_group_communityUpdateInput, user_group_communityUncheckedUpdateInput>
  }


  /**
   * user_group_community delete
   */
  export type user_group_communityDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
    /**
     * Filter which user_group_community to delete.
     * 
    **/
    where: user_group_communityWhereUniqueInput
  }


  /**
   * user_group_community deleteMany
   */
  export type user_group_communityDeleteManyArgs = {
    where?: user_group_communityWhereInput
  }


  /**
   * user_group_community without action
   */
  export type user_group_communityArgs = {
    /**
     * Select specific fields to fetch from the user_group_community
     * 
    **/
    select?: user_group_communitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_group_communityInclude | null
  }



  /**
   * Model menu_main_activity
   */


  export type AggregateMenu_main_activity = {
    _count: Menu_main_activityCountAggregateOutputType | null
    _avg: Menu_main_activityAvgAggregateOutputType | null
    _sum: Menu_main_activitySumAggregateOutputType | null
    _min: Menu_main_activityMinAggregateOutputType | null
    _max: Menu_main_activityMaxAggregateOutputType | null
  }

  export type Menu_main_activityAvgAggregateOutputType = {
    id: number | null
  }

  export type Menu_main_activitySumAggregateOutputType = {
    id: number | null
  }

  export type Menu_main_activityMinAggregateOutputType = {
    id: number | null
    title: string | null
    name_icon: string | null
    color_icon: string | null
    color_title: string | null
    color_background: string | null
  }

  export type Menu_main_activityMaxAggregateOutputType = {
    id: number | null
    title: string | null
    name_icon: string | null
    color_icon: string | null
    color_title: string | null
    color_background: string | null
  }

  export type Menu_main_activityCountAggregateOutputType = {
    id: number
    title: number
    name_icon: number
    color_icon: number
    color_title: number
    color_background: number
    _all: number
  }


  export type Menu_main_activityAvgAggregateInputType = {
    id?: true
  }

  export type Menu_main_activitySumAggregateInputType = {
    id?: true
  }

  export type Menu_main_activityMinAggregateInputType = {
    id?: true
    title?: true
    name_icon?: true
    color_icon?: true
    color_title?: true
    color_background?: true
  }

  export type Menu_main_activityMaxAggregateInputType = {
    id?: true
    title?: true
    name_icon?: true
    color_icon?: true
    color_title?: true
    color_background?: true
  }

  export type Menu_main_activityCountAggregateInputType = {
    id?: true
    title?: true
    name_icon?: true
    color_icon?: true
    color_title?: true
    color_background?: true
    _all?: true
  }

  export type Menu_main_activityAggregateArgs = {
    /**
     * Filter which menu_main_activity to aggregate.
     * 
    **/
    where?: menu_main_activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menu_main_activities to fetch.
     * 
    **/
    orderBy?: Enumerable<menu_main_activityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: menu_main_activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menu_main_activities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menu_main_activities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned menu_main_activities
    **/
    _count?: true | Menu_main_activityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Menu_main_activityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Menu_main_activitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Menu_main_activityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Menu_main_activityMaxAggregateInputType
  }

  export type GetMenu_main_activityAggregateType<T extends Menu_main_activityAggregateArgs> = {
        [P in keyof T & keyof AggregateMenu_main_activity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenu_main_activity[P]>
      : GetScalarType<T[P], AggregateMenu_main_activity[P]>
  }




  export type Menu_main_activityGroupByArgs = {
    where?: menu_main_activityWhereInput
    orderBy?: Enumerable<menu_main_activityOrderByWithAggregationInput>
    by: Array<Menu_main_activityScalarFieldEnum>
    having?: menu_main_activityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Menu_main_activityCountAggregateInputType | true
    _avg?: Menu_main_activityAvgAggregateInputType
    _sum?: Menu_main_activitySumAggregateInputType
    _min?: Menu_main_activityMinAggregateInputType
    _max?: Menu_main_activityMaxAggregateInputType
  }


  export type Menu_main_activityGroupByOutputType = {
    id: number
    title: string
    name_icon: string | null
    color_icon: string | null
    color_title: string | null
    color_background: string | null
    _count: Menu_main_activityCountAggregateOutputType | null
    _avg: Menu_main_activityAvgAggregateOutputType | null
    _sum: Menu_main_activitySumAggregateOutputType | null
    _min: Menu_main_activityMinAggregateOutputType | null
    _max: Menu_main_activityMaxAggregateOutputType | null
  }

  type GetMenu_main_activityGroupByPayload<T extends Menu_main_activityGroupByArgs> = Promise<
    Array<
      PickArray<Menu_main_activityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Menu_main_activityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Menu_main_activityGroupByOutputType[P]>
            : GetScalarType<T[P], Menu_main_activityGroupByOutputType[P]>
        }
      >
    >


  export type menu_main_activitySelect = {
    id?: boolean
    title?: boolean
    name_icon?: boolean
    color_icon?: boolean
    color_title?: boolean
    color_background?: boolean
  }

  export type menu_main_activityGetPayload<
    S extends boolean | null | undefined | menu_main_activityArgs,
    U = keyof S
      > = S extends true
        ? menu_main_activity
    : S extends undefined
    ? never
    : S extends menu_main_activityArgs | menu_main_activityFindManyArgs
    ?'include' extends U
    ? menu_main_activity 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof menu_main_activity ?menu_main_activity [P]
  : 
     never
  } 
    : menu_main_activity
  : menu_main_activity


  type menu_main_activityCountArgs = Merge<
    Omit<menu_main_activityFindManyArgs, 'select' | 'include'> & {
      select?: Menu_main_activityCountAggregateInputType | true
    }
  >

  export interface menu_main_activityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Menu_main_activity that matches the filter.
     * @param {menu_main_activityFindUniqueArgs} args - Arguments to find a Menu_main_activity
     * @example
     * // Get one Menu_main_activity
     * const menu_main_activity = await prisma.menu_main_activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends menu_main_activityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, menu_main_activityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'menu_main_activity'> extends True ? CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity>, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T>>> : CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity | null >, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T> | null >>

    /**
     * Find the first Menu_main_activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_main_activityFindFirstArgs} args - Arguments to find a Menu_main_activity
     * @example
     * // Get one Menu_main_activity
     * const menu_main_activity = await prisma.menu_main_activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends menu_main_activityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, menu_main_activityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'menu_main_activity'> extends True ? CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity>, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T>>> : CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity | null >, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T> | null >>

    /**
     * Find zero or more Menu_main_activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_main_activityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menu_main_activities
     * const menu_main_activities = await prisma.menu_main_activity.findMany()
     * 
     * // Get first 10 Menu_main_activities
     * const menu_main_activities = await prisma.menu_main_activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const menu_main_activityWithIdOnly = await prisma.menu_main_activity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends menu_main_activityFindManyArgs>(
      args?: SelectSubset<T, menu_main_activityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<menu_main_activity>>, PrismaPromise<Array<menu_main_activityGetPayload<T>>>>

    /**
     * Create a Menu_main_activity.
     * @param {menu_main_activityCreateArgs} args - Arguments to create a Menu_main_activity.
     * @example
     * // Create one Menu_main_activity
     * const Menu_main_activity = await prisma.menu_main_activity.create({
     *   data: {
     *     // ... data to create a Menu_main_activity
     *   }
     * })
     * 
    **/
    create<T extends menu_main_activityCreateArgs>(
      args: SelectSubset<T, menu_main_activityCreateArgs>
    ): CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity>, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T>>>

    /**
     * Create many Menu_main_activities.
     *     @param {menu_main_activityCreateManyArgs} args - Arguments to create many Menu_main_activities.
     *     @example
     *     // Create many Menu_main_activities
     *     const menu_main_activity = await prisma.menu_main_activity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends menu_main_activityCreateManyArgs>(
      args?: SelectSubset<T, menu_main_activityCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Menu_main_activity.
     * @param {menu_main_activityDeleteArgs} args - Arguments to delete one Menu_main_activity.
     * @example
     * // Delete one Menu_main_activity
     * const Menu_main_activity = await prisma.menu_main_activity.delete({
     *   where: {
     *     // ... filter to delete one Menu_main_activity
     *   }
     * })
     * 
    **/
    delete<T extends menu_main_activityDeleteArgs>(
      args: SelectSubset<T, menu_main_activityDeleteArgs>
    ): CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity>, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T>>>

    /**
     * Update one Menu_main_activity.
     * @param {menu_main_activityUpdateArgs} args - Arguments to update one Menu_main_activity.
     * @example
     * // Update one Menu_main_activity
     * const menu_main_activity = await prisma.menu_main_activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends menu_main_activityUpdateArgs>(
      args: SelectSubset<T, menu_main_activityUpdateArgs>
    ): CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity>, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T>>>

    /**
     * Delete zero or more Menu_main_activities.
     * @param {menu_main_activityDeleteManyArgs} args - Arguments to filter Menu_main_activities to delete.
     * @example
     * // Delete a few Menu_main_activities
     * const { count } = await prisma.menu_main_activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends menu_main_activityDeleteManyArgs>(
      args?: SelectSubset<T, menu_main_activityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menu_main_activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_main_activityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menu_main_activities
     * const menu_main_activity = await prisma.menu_main_activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends menu_main_activityUpdateManyArgs>(
      args: SelectSubset<T, menu_main_activityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Menu_main_activity.
     * @param {menu_main_activityUpsertArgs} args - Arguments to update or create a Menu_main_activity.
     * @example
     * // Update or create a Menu_main_activity
     * const menu_main_activity = await prisma.menu_main_activity.upsert({
     *   create: {
     *     // ... data to create a Menu_main_activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menu_main_activity we want to update
     *   }
     * })
    **/
    upsert<T extends menu_main_activityUpsertArgs>(
      args: SelectSubset<T, menu_main_activityUpsertArgs>
    ): CheckSelect<T, Prisma__menu_main_activityClient<menu_main_activity>, Prisma__menu_main_activityClient<menu_main_activityGetPayload<T>>>

    /**
     * Count the number of Menu_main_activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menu_main_activityCountArgs} args - Arguments to filter Menu_main_activities to count.
     * @example
     * // Count the number of Menu_main_activities
     * const count = await prisma.menu_main_activity.count({
     *   where: {
     *     // ... the filter for the Menu_main_activities we want to count
     *   }
     * })
    **/
    count<T extends menu_main_activityCountArgs>(
      args?: Subset<T, menu_main_activityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Menu_main_activityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menu_main_activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Menu_main_activityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Menu_main_activityAggregateArgs>(args: Subset<T, Menu_main_activityAggregateArgs>): PrismaPromise<GetMenu_main_activityAggregateType<T>>

    /**
     * Group by Menu_main_activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Menu_main_activityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Menu_main_activityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Menu_main_activityGroupByArgs['orderBy'] }
        : { orderBy?: Menu_main_activityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Menu_main_activityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenu_main_activityGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for menu_main_activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__menu_main_activityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * menu_main_activity findUnique
   */
  export type menu_main_activityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
    /**
     * Throw an Error if a menu_main_activity can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which menu_main_activity to fetch.
     * 
    **/
    where: menu_main_activityWhereUniqueInput
  }


  /**
   * menu_main_activity findFirst
   */
  export type menu_main_activityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
    /**
     * Throw an Error if a menu_main_activity can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which menu_main_activity to fetch.
     * 
    **/
    where?: menu_main_activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menu_main_activities to fetch.
     * 
    **/
    orderBy?: Enumerable<menu_main_activityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menu_main_activities.
     * 
    **/
    cursor?: menu_main_activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menu_main_activities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menu_main_activities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menu_main_activities.
     * 
    **/
    distinct?: Enumerable<Menu_main_activityScalarFieldEnum>
  }


  /**
   * menu_main_activity findMany
   */
  export type menu_main_activityFindManyArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
    /**
     * Filter, which menu_main_activities to fetch.
     * 
    **/
    where?: menu_main_activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menu_main_activities to fetch.
     * 
    **/
    orderBy?: Enumerable<menu_main_activityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing menu_main_activities.
     * 
    **/
    cursor?: menu_main_activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menu_main_activities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menu_main_activities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Menu_main_activityScalarFieldEnum>
  }


  /**
   * menu_main_activity create
   */
  export type menu_main_activityCreateArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
    /**
     * The data needed to create a menu_main_activity.
     * 
    **/
    data: XOR<menu_main_activityCreateInput, menu_main_activityUncheckedCreateInput>
  }


  /**
   * menu_main_activity createMany
   */
  export type menu_main_activityCreateManyArgs = {
    data: Enumerable<menu_main_activityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * menu_main_activity update
   */
  export type menu_main_activityUpdateArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
    /**
     * The data needed to update a menu_main_activity.
     * 
    **/
    data: XOR<menu_main_activityUpdateInput, menu_main_activityUncheckedUpdateInput>
    /**
     * Choose, which menu_main_activity to update.
     * 
    **/
    where: menu_main_activityWhereUniqueInput
  }


  /**
   * menu_main_activity updateMany
   */
  export type menu_main_activityUpdateManyArgs = {
    data: XOR<menu_main_activityUpdateManyMutationInput, menu_main_activityUncheckedUpdateManyInput>
    where?: menu_main_activityWhereInput
  }


  /**
   * menu_main_activity upsert
   */
  export type menu_main_activityUpsertArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
    /**
     * The filter to search for the menu_main_activity to update in case it exists.
     * 
    **/
    where: menu_main_activityWhereUniqueInput
    /**
     * In case the menu_main_activity found by the `where` argument doesn't exist, create a new menu_main_activity with this data.
     * 
    **/
    create: XOR<menu_main_activityCreateInput, menu_main_activityUncheckedCreateInput>
    /**
     * In case the menu_main_activity was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<menu_main_activityUpdateInput, menu_main_activityUncheckedUpdateInput>
  }


  /**
   * menu_main_activity delete
   */
  export type menu_main_activityDeleteArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
    /**
     * Filter which menu_main_activity to delete.
     * 
    **/
    where: menu_main_activityWhereUniqueInput
  }


  /**
   * menu_main_activity deleteMany
   */
  export type menu_main_activityDeleteManyArgs = {
    where?: menu_main_activityWhereInput
  }


  /**
   * menu_main_activity without action
   */
  export type menu_main_activityArgs = {
    /**
     * Select specific fields to fetch from the menu_main_activity
     * 
    **/
    select?: menu_main_activitySelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CommunityScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    author_uid: 'author_uid',
    with_password: 'with_password',
    password: 'password'
  };

  export type CommunityScalarFieldEnum = (typeof CommunityScalarFieldEnum)[keyof typeof CommunityScalarFieldEnum]


  export const User_communityScalarFieldEnum: {
    id: 'id',
    community_id: 'community_id',
    user_uid: 'user_uid'
  };

  export type User_communityScalarFieldEnum = (typeof User_communityScalarFieldEnum)[keyof typeof User_communityScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    firebase_uid: 'firebase_uid',
    email: 'email',
    name: 'name',
    last_name: 'last_name'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Group_communityScalarFieldEnum: {
    id: 'id',
    community_id: 'community_id',
    title: 'title',
    description: 'description',
    max_members: 'max_members',
    with_password: 'with_password',
    password: 'password'
  };

  export type Group_communityScalarFieldEnum = (typeof Group_communityScalarFieldEnum)[keyof typeof Group_communityScalarFieldEnum]


  export const User_group_communityScalarFieldEnum: {
    id: 'id',
    group_id: 'group_id',
    user_uid: 'user_uid'
  };

  export type User_group_communityScalarFieldEnum = (typeof User_group_communityScalarFieldEnum)[keyof typeof User_group_communityScalarFieldEnum]


  export const Menu_main_activityScalarFieldEnum: {
    id: 'id',
    title: 'title',
    name_icon: 'name_icon',
    color_icon: 'color_icon',
    color_title: 'color_title',
    color_background: 'color_background'
  };

  export type Menu_main_activityScalarFieldEnum = (typeof Menu_main_activityScalarFieldEnum)[keyof typeof Menu_main_activityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type communityWhereInput = {
    AND?: Enumerable<communityWhereInput>
    OR?: Enumerable<communityWhereInput>
    NOT?: Enumerable<communityWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    author_uid?: StringNullableFilter | string | null
    with_password?: IntNullableFilter | number | null
    password?: StringNullableFilter | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
    group_community?: Group_communityListRelationFilter
    user_community?: User_communityListRelationFilter
  }

  export type communityOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author_uid?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
    users?: usersOrderByWithRelationInput
    group_community?: group_communityOrderByRelationAggregateInput
    user_community?: user_communityOrderByRelationAggregateInput
  }

  export type communityWhereUniqueInput = {
    id?: number
  }

  export type communityOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author_uid?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
    _count?: communityCountOrderByAggregateInput
    _avg?: communityAvgOrderByAggregateInput
    _max?: communityMaxOrderByAggregateInput
    _min?: communityMinOrderByAggregateInput
    _sum?: communitySumOrderByAggregateInput
  }

  export type communityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<communityScalarWhereWithAggregatesInput>
    OR?: Enumerable<communityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<communityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    author_uid?: StringNullableWithAggregatesFilter | string | null
    with_password?: IntNullableWithAggregatesFilter | number | null
    password?: StringNullableWithAggregatesFilter | string | null
  }

  export type user_communityWhereInput = {
    AND?: Enumerable<user_communityWhereInput>
    OR?: Enumerable<user_communityWhereInput>
    NOT?: Enumerable<user_communityWhereInput>
    id?: IntFilter | number
    community_id?: IntNullableFilter | number | null
    user_uid?: StringNullableFilter | string | null
    community?: XOR<CommunityRelationFilter, communityWhereInput> | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type user_communityOrderByWithRelationInput = {
    id?: SortOrder
    community_id?: SortOrder
    user_uid?: SortOrder
    community?: communityOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type user_communityWhereUniqueInput = {
    id?: number
  }

  export type user_communityOrderByWithAggregationInput = {
    id?: SortOrder
    community_id?: SortOrder
    user_uid?: SortOrder
    _count?: user_communityCountOrderByAggregateInput
    _avg?: user_communityAvgOrderByAggregateInput
    _max?: user_communityMaxOrderByAggregateInput
    _min?: user_communityMinOrderByAggregateInput
    _sum?: user_communitySumOrderByAggregateInput
  }

  export type user_communityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_communityScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_communityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_communityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    community_id?: IntNullableWithAggregatesFilter | number | null
    user_uid?: StringNullableWithAggregatesFilter | string | null
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    firebase_uid?: StringFilter | string
    email?: StringNullableFilter | string | null
    name?: StringNullableFilter | string | null
    last_name?: StringNullableFilter | string | null
    community?: CommunityListRelationFilter
    user_community?: User_communityListRelationFilter
    user_group_community?: User_group_communityListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    firebase_uid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    last_name?: SortOrder
    community?: communityOrderByRelationAggregateInput
    user_community?: user_communityOrderByRelationAggregateInput
    user_group_community?: user_group_communityOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    firebase_uid?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    firebase_uid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    last_name?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firebase_uid?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    name?: StringNullableWithAggregatesFilter | string | null
    last_name?: StringNullableWithAggregatesFilter | string | null
  }

  export type group_communityWhereInput = {
    AND?: Enumerable<group_communityWhereInput>
    OR?: Enumerable<group_communityWhereInput>
    NOT?: Enumerable<group_communityWhereInput>
    id?: IntFilter | number
    community_id?: IntNullableFilter | number | null
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    max_members?: IntNullableFilter | number | null
    with_password?: IntNullableFilter | number | null
    password?: StringNullableFilter | string | null
    community?: XOR<CommunityRelationFilter, communityWhereInput> | null
    user_group_community?: User_group_communityListRelationFilter
  }

  export type group_communityOrderByWithRelationInput = {
    id?: SortOrder
    community_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    max_members?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
    community?: communityOrderByWithRelationInput
    user_group_community?: user_group_communityOrderByRelationAggregateInput
  }

  export type group_communityWhereUniqueInput = {
    id?: number
  }

  export type group_communityOrderByWithAggregationInput = {
    id?: SortOrder
    community_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    max_members?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
    _count?: group_communityCountOrderByAggregateInput
    _avg?: group_communityAvgOrderByAggregateInput
    _max?: group_communityMaxOrderByAggregateInput
    _min?: group_communityMinOrderByAggregateInput
    _sum?: group_communitySumOrderByAggregateInput
  }

  export type group_communityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<group_communityScalarWhereWithAggregatesInput>
    OR?: Enumerable<group_communityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<group_communityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    community_id?: IntNullableWithAggregatesFilter | number | null
    title?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    max_members?: IntNullableWithAggregatesFilter | number | null
    with_password?: IntNullableWithAggregatesFilter | number | null
    password?: StringNullableWithAggregatesFilter | string | null
  }

  export type user_group_communityWhereInput = {
    AND?: Enumerable<user_group_communityWhereInput>
    OR?: Enumerable<user_group_communityWhereInput>
    NOT?: Enumerable<user_group_communityWhereInput>
    id?: IntFilter | number
    group_id?: IntNullableFilter | number | null
    user_uid?: StringNullableFilter | string | null
    group_community?: XOR<Group_communityRelationFilter, group_communityWhereInput> | null
    users?: XOR<UsersRelationFilter, usersWhereInput> | null
  }

  export type user_group_communityOrderByWithRelationInput = {
    id?: SortOrder
    group_id?: SortOrder
    user_uid?: SortOrder
    group_community?: group_communityOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type user_group_communityWhereUniqueInput = {
    id?: number
  }

  export type user_group_communityOrderByWithAggregationInput = {
    id?: SortOrder
    group_id?: SortOrder
    user_uid?: SortOrder
    _count?: user_group_communityCountOrderByAggregateInput
    _avg?: user_group_communityAvgOrderByAggregateInput
    _max?: user_group_communityMaxOrderByAggregateInput
    _min?: user_group_communityMinOrderByAggregateInput
    _sum?: user_group_communitySumOrderByAggregateInput
  }

  export type user_group_communityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_group_communityScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_group_communityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_group_communityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    group_id?: IntNullableWithAggregatesFilter | number | null
    user_uid?: StringNullableWithAggregatesFilter | string | null
  }

  export type menu_main_activityWhereInput = {
    AND?: Enumerable<menu_main_activityWhereInput>
    OR?: Enumerable<menu_main_activityWhereInput>
    NOT?: Enumerable<menu_main_activityWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    name_icon?: StringNullableFilter | string | null
    color_icon?: StringNullableFilter | string | null
    color_title?: StringNullableFilter | string | null
    color_background?: StringNullableFilter | string | null
  }

  export type menu_main_activityOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    name_icon?: SortOrder
    color_icon?: SortOrder
    color_title?: SortOrder
    color_background?: SortOrder
  }

  export type menu_main_activityWhereUniqueInput = {
    id?: number
  }

  export type menu_main_activityOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    name_icon?: SortOrder
    color_icon?: SortOrder
    color_title?: SortOrder
    color_background?: SortOrder
    _count?: menu_main_activityCountOrderByAggregateInput
    _avg?: menu_main_activityAvgOrderByAggregateInput
    _max?: menu_main_activityMaxOrderByAggregateInput
    _min?: menu_main_activityMinOrderByAggregateInput
    _sum?: menu_main_activitySumOrderByAggregateInput
  }

  export type menu_main_activityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<menu_main_activityScalarWhereWithAggregatesInput>
    OR?: Enumerable<menu_main_activityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<menu_main_activityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    name_icon?: StringNullableWithAggregatesFilter | string | null
    color_icon?: StringNullableWithAggregatesFilter | string | null
    color_title?: StringNullableWithAggregatesFilter | string | null
    color_background?: StringNullableWithAggregatesFilter | string | null
  }

  export type communityCreateInput = {
    title?: string | null
    description?: string | null
    with_password?: number | null
    password?: string | null
    users?: usersCreateNestedOneWithoutCommunityInput
    group_community?: group_communityCreateNestedManyWithoutCommunityInput
    user_community?: user_communityCreateNestedManyWithoutCommunityInput
  }

  export type communityUncheckedCreateInput = {
    id?: number
    title?: string | null
    description?: string | null
    author_uid?: string | null
    with_password?: number | null
    password?: string | null
    group_community?: group_communityUncheckedCreateNestedManyWithoutCommunityInput
    user_community?: user_communityUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type communityUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutCommunityInput
    group_community?: group_communityUpdateManyWithoutCommunityInput
    user_community?: user_communityUpdateManyWithoutCommunityInput
  }

  export type communityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    author_uid?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    group_community?: group_communityUncheckedUpdateManyWithoutCommunityInput
    user_community?: user_communityUncheckedUpdateManyWithoutCommunityInput
  }

  export type communityCreateManyInput = {
    id?: number
    title?: string | null
    description?: string | null
    author_uid?: string | null
    with_password?: number | null
    password?: string | null
  }

  export type communityUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type communityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    author_uid?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_communityCreateInput = {
    community?: communityCreateNestedOneWithoutUser_communityInput
    users?: usersCreateNestedOneWithoutUser_communityInput
  }

  export type user_communityUncheckedCreateInput = {
    id?: number
    community_id?: number | null
    user_uid?: string | null
  }

  export type user_communityUpdateInput = {
    community?: communityUpdateOneWithoutUser_communityInput
    users?: usersUpdateOneWithoutUser_communityInput
  }

  export type user_communityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    community_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_communityCreateManyInput = {
    id?: number
    community_id?: number | null
    user_uid?: string | null
  }

  export type user_communityUpdateManyMutationInput = {

  }

  export type user_communityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    community_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersCreateInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    community?: communityCreateNestedManyWithoutUsersInput
    user_community?: user_communityCreateNestedManyWithoutUsersInput
    user_group_community?: user_group_communityCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    community?: communityUncheckedCreateNestedManyWithoutUsersInput
    user_community?: user_communityUncheckedCreateNestedManyWithoutUsersInput
    user_group_community?: user_group_communityUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUpdateManyWithoutUsersInput
    user_community?: user_communityUpdateManyWithoutUsersInput
    user_group_community?: user_group_communityUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUncheckedUpdateManyWithoutUsersInput
    user_community?: user_communityUncheckedUpdateManyWithoutUsersInput
    user_group_community?: user_group_communityUncheckedUpdateManyWithoutUsersInput
  }

  export type usersCreateManyInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type group_communityCreateInput = {
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
    community?: communityCreateNestedOneWithoutGroup_communityInput
    user_group_community?: user_group_communityCreateNestedManyWithoutGroup_communityInput
  }

  export type group_communityUncheckedCreateInput = {
    id?: number
    community_id?: number | null
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
    user_group_community?: user_group_communityUncheckedCreateNestedManyWithoutGroup_communityInput
  }

  export type group_communityUpdateInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUpdateOneWithoutGroup_communityInput
    user_group_community?: user_group_communityUpdateManyWithoutGroup_communityInput
  }

  export type group_communityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    community_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user_group_community?: user_group_communityUncheckedUpdateManyWithoutGroup_communityInput
  }

  export type group_communityCreateManyInput = {
    id?: number
    community_id?: number | null
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
  }

  export type group_communityUpdateManyMutationInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type group_communityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    community_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_group_communityCreateInput = {
    group_community?: group_communityCreateNestedOneWithoutUser_group_communityInput
    users?: usersCreateNestedOneWithoutUser_group_communityInput
  }

  export type user_group_communityUncheckedCreateInput = {
    id?: number
    group_id?: number | null
    user_uid?: string | null
  }

  export type user_group_communityUpdateInput = {
    group_community?: group_communityUpdateOneWithoutUser_group_communityInput
    users?: usersUpdateOneWithoutUser_group_communityInput
  }

  export type user_group_communityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_group_communityCreateManyInput = {
    id?: number
    group_id?: number | null
    user_uid?: string | null
  }

  export type user_group_communityUpdateManyMutationInput = {

  }

  export type user_group_communityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menu_main_activityCreateInput = {
    title: string
    name_icon?: string | null
    color_icon?: string | null
    color_title?: string | null
    color_background?: string | null
  }

  export type menu_main_activityUncheckedCreateInput = {
    id?: number
    title: string
    name_icon?: string | null
    color_icon?: string | null
    color_title?: string | null
    color_background?: string | null
  }

  export type menu_main_activityUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    name_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_title?: NullableStringFieldUpdateOperationsInput | string | null
    color_background?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menu_main_activityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    name_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_title?: NullableStringFieldUpdateOperationsInput | string | null
    color_background?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menu_main_activityCreateManyInput = {
    id?: number
    title: string
    name_icon?: string | null
    color_icon?: string | null
    color_title?: string | null
    color_background?: string | null
  }

  export type menu_main_activityUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    name_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_title?: NullableStringFieldUpdateOperationsInput | string | null
    color_background?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type menu_main_activityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    name_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_icon?: NullableStringFieldUpdateOperationsInput | string | null
    color_title?: NullableStringFieldUpdateOperationsInput | string | null
    color_background?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type Group_communityListRelationFilter = {
    every?: group_communityWhereInput
    some?: group_communityWhereInput
    none?: group_communityWhereInput
  }

  export type User_communityListRelationFilter = {
    every?: user_communityWhereInput
    some?: user_communityWhereInput
    none?: user_communityWhereInput
  }

  export type group_communityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_communityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type communityCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author_uid?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
  }

  export type communityAvgOrderByAggregateInput = {
    id?: SortOrder
    with_password?: SortOrder
  }

  export type communityMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author_uid?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
  }

  export type communityMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    author_uid?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
  }

  export type communitySumOrderByAggregateInput = {
    id?: SortOrder
    with_password?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type CommunityRelationFilter = {
    is?: communityWhereInput | null
    isNot?: communityWhereInput | null
  }

  export type user_communityCountOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    user_uid?: SortOrder
  }

  export type user_communityAvgOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
  }

  export type user_communityMaxOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    user_uid?: SortOrder
  }

  export type user_communityMinOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    user_uid?: SortOrder
  }

  export type user_communitySumOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type CommunityListRelationFilter = {
    every?: communityWhereInput
    some?: communityWhereInput
    none?: communityWhereInput
  }

  export type User_group_communityListRelationFilter = {
    every?: user_group_communityWhereInput
    some?: user_group_communityWhereInput
    none?: user_group_communityWhereInput
  }

  export type communityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_group_communityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    firebase_uid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    last_name?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    firebase_uid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    last_name?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    firebase_uid?: SortOrder
    email?: SortOrder
    name?: SortOrder
    last_name?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type group_communityCountOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    max_members?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
  }

  export type group_communityAvgOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    max_members?: SortOrder
    with_password?: SortOrder
  }

  export type group_communityMaxOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    max_members?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
  }

  export type group_communityMinOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    max_members?: SortOrder
    with_password?: SortOrder
    password?: SortOrder
  }

  export type group_communitySumOrderByAggregateInput = {
    id?: SortOrder
    community_id?: SortOrder
    max_members?: SortOrder
    with_password?: SortOrder
  }

  export type Group_communityRelationFilter = {
    is?: group_communityWhereInput | null
    isNot?: group_communityWhereInput | null
  }

  export type user_group_communityCountOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    user_uid?: SortOrder
  }

  export type user_group_communityAvgOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
  }

  export type user_group_communityMaxOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    user_uid?: SortOrder
  }

  export type user_group_communityMinOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
    user_uid?: SortOrder
  }

  export type user_group_communitySumOrderByAggregateInput = {
    id?: SortOrder
    group_id?: SortOrder
  }

  export type menu_main_activityCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    name_icon?: SortOrder
    color_icon?: SortOrder
    color_title?: SortOrder
    color_background?: SortOrder
  }

  export type menu_main_activityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type menu_main_activityMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    name_icon?: SortOrder
    color_icon?: SortOrder
    color_title?: SortOrder
    color_background?: SortOrder
  }

  export type menu_main_activityMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    name_icon?: SortOrder
    color_icon?: SortOrder
    color_title?: SortOrder
    color_background?: SortOrder
  }

  export type menu_main_activitySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersCreateNestedOneWithoutCommunityInput = {
    create?: XOR<usersCreateWithoutCommunityInput, usersUncheckedCreateWithoutCommunityInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommunityInput
    connect?: usersWhereUniqueInput
  }

  export type group_communityCreateNestedManyWithoutCommunityInput = {
    create?: XOR<Enumerable<group_communityCreateWithoutCommunityInput>, Enumerable<group_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<group_communityCreateOrConnectWithoutCommunityInput>
    createMany?: group_communityCreateManyCommunityInputEnvelope
    connect?: Enumerable<group_communityWhereUniqueInput>
  }

  export type user_communityCreateNestedManyWithoutCommunityInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutCommunityInput>, Enumerable<user_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutCommunityInput>
    createMany?: user_communityCreateManyCommunityInputEnvelope
    connect?: Enumerable<user_communityWhereUniqueInput>
  }

  export type group_communityUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<Enumerable<group_communityCreateWithoutCommunityInput>, Enumerable<group_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<group_communityCreateOrConnectWithoutCommunityInput>
    createMany?: group_communityCreateManyCommunityInputEnvelope
    connect?: Enumerable<group_communityWhereUniqueInput>
  }

  export type user_communityUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutCommunityInput>, Enumerable<user_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutCommunityInput>
    createMany?: user_communityCreateManyCommunityInputEnvelope
    connect?: Enumerable<user_communityWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneWithoutCommunityInput = {
    create?: XOR<usersCreateWithoutCommunityInput, usersUncheckedCreateWithoutCommunityInput>
    connectOrCreate?: usersCreateOrConnectWithoutCommunityInput
    upsert?: usersUpsertWithoutCommunityInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutCommunityInput, usersUncheckedUpdateWithoutCommunityInput>
  }

  export type group_communityUpdateManyWithoutCommunityInput = {
    create?: XOR<Enumerable<group_communityCreateWithoutCommunityInput>, Enumerable<group_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<group_communityCreateOrConnectWithoutCommunityInput>
    upsert?: Enumerable<group_communityUpsertWithWhereUniqueWithoutCommunityInput>
    createMany?: group_communityCreateManyCommunityInputEnvelope
    set?: Enumerable<group_communityWhereUniqueInput>
    disconnect?: Enumerable<group_communityWhereUniqueInput>
    delete?: Enumerable<group_communityWhereUniqueInput>
    connect?: Enumerable<group_communityWhereUniqueInput>
    update?: Enumerable<group_communityUpdateWithWhereUniqueWithoutCommunityInput>
    updateMany?: Enumerable<group_communityUpdateManyWithWhereWithoutCommunityInput>
    deleteMany?: Enumerable<group_communityScalarWhereInput>
  }

  export type user_communityUpdateManyWithoutCommunityInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutCommunityInput>, Enumerable<user_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutCommunityInput>
    upsert?: Enumerable<user_communityUpsertWithWhereUniqueWithoutCommunityInput>
    createMany?: user_communityCreateManyCommunityInputEnvelope
    set?: Enumerable<user_communityWhereUniqueInput>
    disconnect?: Enumerable<user_communityWhereUniqueInput>
    delete?: Enumerable<user_communityWhereUniqueInput>
    connect?: Enumerable<user_communityWhereUniqueInput>
    update?: Enumerable<user_communityUpdateWithWhereUniqueWithoutCommunityInput>
    updateMany?: Enumerable<user_communityUpdateManyWithWhereWithoutCommunityInput>
    deleteMany?: Enumerable<user_communityScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type group_communityUncheckedUpdateManyWithoutCommunityInput = {
    create?: XOR<Enumerable<group_communityCreateWithoutCommunityInput>, Enumerable<group_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<group_communityCreateOrConnectWithoutCommunityInput>
    upsert?: Enumerable<group_communityUpsertWithWhereUniqueWithoutCommunityInput>
    createMany?: group_communityCreateManyCommunityInputEnvelope
    set?: Enumerable<group_communityWhereUniqueInput>
    disconnect?: Enumerable<group_communityWhereUniqueInput>
    delete?: Enumerable<group_communityWhereUniqueInput>
    connect?: Enumerable<group_communityWhereUniqueInput>
    update?: Enumerable<group_communityUpdateWithWhereUniqueWithoutCommunityInput>
    updateMany?: Enumerable<group_communityUpdateManyWithWhereWithoutCommunityInput>
    deleteMany?: Enumerable<group_communityScalarWhereInput>
  }

  export type user_communityUncheckedUpdateManyWithoutCommunityInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutCommunityInput>, Enumerable<user_communityUncheckedCreateWithoutCommunityInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutCommunityInput>
    upsert?: Enumerable<user_communityUpsertWithWhereUniqueWithoutCommunityInput>
    createMany?: user_communityCreateManyCommunityInputEnvelope
    set?: Enumerable<user_communityWhereUniqueInput>
    disconnect?: Enumerable<user_communityWhereUniqueInput>
    delete?: Enumerable<user_communityWhereUniqueInput>
    connect?: Enumerable<user_communityWhereUniqueInput>
    update?: Enumerable<user_communityUpdateWithWhereUniqueWithoutCommunityInput>
    updateMany?: Enumerable<user_communityUpdateManyWithWhereWithoutCommunityInput>
    deleteMany?: Enumerable<user_communityScalarWhereInput>
  }

  export type communityCreateNestedOneWithoutUser_communityInput = {
    create?: XOR<communityCreateWithoutUser_communityInput, communityUncheckedCreateWithoutUser_communityInput>
    connectOrCreate?: communityCreateOrConnectWithoutUser_communityInput
    connect?: communityWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUser_communityInput = {
    create?: XOR<usersCreateWithoutUser_communityInput, usersUncheckedCreateWithoutUser_communityInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_communityInput
    connect?: usersWhereUniqueInput
  }

  export type communityUpdateOneWithoutUser_communityInput = {
    create?: XOR<communityCreateWithoutUser_communityInput, communityUncheckedCreateWithoutUser_communityInput>
    connectOrCreate?: communityCreateOrConnectWithoutUser_communityInput
    upsert?: communityUpsertWithoutUser_communityInput
    disconnect?: boolean
    delete?: boolean
    connect?: communityWhereUniqueInput
    update?: XOR<communityUpdateWithoutUser_communityInput, communityUncheckedUpdateWithoutUser_communityInput>
  }

  export type usersUpdateOneWithoutUser_communityInput = {
    create?: XOR<usersCreateWithoutUser_communityInput, usersUncheckedCreateWithoutUser_communityInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_communityInput
    upsert?: usersUpsertWithoutUser_communityInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUser_communityInput, usersUncheckedUpdateWithoutUser_communityInput>
  }

  export type communityCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<communityCreateWithoutUsersInput>, Enumerable<communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<communityCreateOrConnectWithoutUsersInput>
    createMany?: communityCreateManyUsersInputEnvelope
    connect?: Enumerable<communityWhereUniqueInput>
  }

  export type user_communityCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutUsersInput>, Enumerable<user_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutUsersInput>
    createMany?: user_communityCreateManyUsersInputEnvelope
    connect?: Enumerable<user_communityWhereUniqueInput>
  }

  export type user_group_communityCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutUsersInput>, Enumerable<user_group_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutUsersInput>
    createMany?: user_group_communityCreateManyUsersInputEnvelope
    connect?: Enumerable<user_group_communityWhereUniqueInput>
  }

  export type communityUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<communityCreateWithoutUsersInput>, Enumerable<communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<communityCreateOrConnectWithoutUsersInput>
    createMany?: communityCreateManyUsersInputEnvelope
    connect?: Enumerable<communityWhereUniqueInput>
  }

  export type user_communityUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutUsersInput>, Enumerable<user_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutUsersInput>
    createMany?: user_communityCreateManyUsersInputEnvelope
    connect?: Enumerable<user_communityWhereUniqueInput>
  }

  export type user_group_communityUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutUsersInput>, Enumerable<user_group_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutUsersInput>
    createMany?: user_group_communityCreateManyUsersInputEnvelope
    connect?: Enumerable<user_group_communityWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type communityUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<communityCreateWithoutUsersInput>, Enumerable<communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<communityCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<communityUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: communityCreateManyUsersInputEnvelope
    set?: Enumerable<communityWhereUniqueInput>
    disconnect?: Enumerable<communityWhereUniqueInput>
    delete?: Enumerable<communityWhereUniqueInput>
    connect?: Enumerable<communityWhereUniqueInput>
    update?: Enumerable<communityUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<communityUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<communityScalarWhereInput>
  }

  export type user_communityUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutUsersInput>, Enumerable<user_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_communityUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_communityCreateManyUsersInputEnvelope
    set?: Enumerable<user_communityWhereUniqueInput>
    disconnect?: Enumerable<user_communityWhereUniqueInput>
    delete?: Enumerable<user_communityWhereUniqueInput>
    connect?: Enumerable<user_communityWhereUniqueInput>
    update?: Enumerable<user_communityUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_communityUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_communityScalarWhereInput>
  }

  export type user_group_communityUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutUsersInput>, Enumerable<user_group_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_group_communityUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_group_communityCreateManyUsersInputEnvelope
    set?: Enumerable<user_group_communityWhereUniqueInput>
    disconnect?: Enumerable<user_group_communityWhereUniqueInput>
    delete?: Enumerable<user_group_communityWhereUniqueInput>
    connect?: Enumerable<user_group_communityWhereUniqueInput>
    update?: Enumerable<user_group_communityUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_group_communityUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_group_communityScalarWhereInput>
  }

  export type communityUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<communityCreateWithoutUsersInput>, Enumerable<communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<communityCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<communityUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: communityCreateManyUsersInputEnvelope
    set?: Enumerable<communityWhereUniqueInput>
    disconnect?: Enumerable<communityWhereUniqueInput>
    delete?: Enumerable<communityWhereUniqueInput>
    connect?: Enumerable<communityWhereUniqueInput>
    update?: Enumerable<communityUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<communityUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<communityScalarWhereInput>
  }

  export type user_communityUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_communityCreateWithoutUsersInput>, Enumerable<user_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_communityCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_communityUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_communityCreateManyUsersInputEnvelope
    set?: Enumerable<user_communityWhereUniqueInput>
    disconnect?: Enumerable<user_communityWhereUniqueInput>
    delete?: Enumerable<user_communityWhereUniqueInput>
    connect?: Enumerable<user_communityWhereUniqueInput>
    update?: Enumerable<user_communityUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_communityUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_communityScalarWhereInput>
  }

  export type user_group_communityUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutUsersInput>, Enumerable<user_group_communityUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<user_group_communityUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: user_group_communityCreateManyUsersInputEnvelope
    set?: Enumerable<user_group_communityWhereUniqueInput>
    disconnect?: Enumerable<user_group_communityWhereUniqueInput>
    delete?: Enumerable<user_group_communityWhereUniqueInput>
    connect?: Enumerable<user_group_communityWhereUniqueInput>
    update?: Enumerable<user_group_communityUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<user_group_communityUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<user_group_communityScalarWhereInput>
  }

  export type communityCreateNestedOneWithoutGroup_communityInput = {
    create?: XOR<communityCreateWithoutGroup_communityInput, communityUncheckedCreateWithoutGroup_communityInput>
    connectOrCreate?: communityCreateOrConnectWithoutGroup_communityInput
    connect?: communityWhereUniqueInput
  }

  export type user_group_communityCreateNestedManyWithoutGroup_communityInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutGroup_communityInput>, Enumerable<user_group_communityUncheckedCreateWithoutGroup_communityInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutGroup_communityInput>
    createMany?: user_group_communityCreateManyGroup_communityInputEnvelope
    connect?: Enumerable<user_group_communityWhereUniqueInput>
  }

  export type user_group_communityUncheckedCreateNestedManyWithoutGroup_communityInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutGroup_communityInput>, Enumerable<user_group_communityUncheckedCreateWithoutGroup_communityInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutGroup_communityInput>
    createMany?: user_group_communityCreateManyGroup_communityInputEnvelope
    connect?: Enumerable<user_group_communityWhereUniqueInput>
  }

  export type communityUpdateOneWithoutGroup_communityInput = {
    create?: XOR<communityCreateWithoutGroup_communityInput, communityUncheckedCreateWithoutGroup_communityInput>
    connectOrCreate?: communityCreateOrConnectWithoutGroup_communityInput
    upsert?: communityUpsertWithoutGroup_communityInput
    disconnect?: boolean
    delete?: boolean
    connect?: communityWhereUniqueInput
    update?: XOR<communityUpdateWithoutGroup_communityInput, communityUncheckedUpdateWithoutGroup_communityInput>
  }

  export type user_group_communityUpdateManyWithoutGroup_communityInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutGroup_communityInput>, Enumerable<user_group_communityUncheckedCreateWithoutGroup_communityInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutGroup_communityInput>
    upsert?: Enumerable<user_group_communityUpsertWithWhereUniqueWithoutGroup_communityInput>
    createMany?: user_group_communityCreateManyGroup_communityInputEnvelope
    set?: Enumerable<user_group_communityWhereUniqueInput>
    disconnect?: Enumerable<user_group_communityWhereUniqueInput>
    delete?: Enumerable<user_group_communityWhereUniqueInput>
    connect?: Enumerable<user_group_communityWhereUniqueInput>
    update?: Enumerable<user_group_communityUpdateWithWhereUniqueWithoutGroup_communityInput>
    updateMany?: Enumerable<user_group_communityUpdateManyWithWhereWithoutGroup_communityInput>
    deleteMany?: Enumerable<user_group_communityScalarWhereInput>
  }

  export type user_group_communityUncheckedUpdateManyWithoutGroup_communityInput = {
    create?: XOR<Enumerable<user_group_communityCreateWithoutGroup_communityInput>, Enumerable<user_group_communityUncheckedCreateWithoutGroup_communityInput>>
    connectOrCreate?: Enumerable<user_group_communityCreateOrConnectWithoutGroup_communityInput>
    upsert?: Enumerable<user_group_communityUpsertWithWhereUniqueWithoutGroup_communityInput>
    createMany?: user_group_communityCreateManyGroup_communityInputEnvelope
    set?: Enumerable<user_group_communityWhereUniqueInput>
    disconnect?: Enumerable<user_group_communityWhereUniqueInput>
    delete?: Enumerable<user_group_communityWhereUniqueInput>
    connect?: Enumerable<user_group_communityWhereUniqueInput>
    update?: Enumerable<user_group_communityUpdateWithWhereUniqueWithoutGroup_communityInput>
    updateMany?: Enumerable<user_group_communityUpdateManyWithWhereWithoutGroup_communityInput>
    deleteMany?: Enumerable<user_group_communityScalarWhereInput>
  }

  export type group_communityCreateNestedOneWithoutUser_group_communityInput = {
    create?: XOR<group_communityCreateWithoutUser_group_communityInput, group_communityUncheckedCreateWithoutUser_group_communityInput>
    connectOrCreate?: group_communityCreateOrConnectWithoutUser_group_communityInput
    connect?: group_communityWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUser_group_communityInput = {
    create?: XOR<usersCreateWithoutUser_group_communityInput, usersUncheckedCreateWithoutUser_group_communityInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_group_communityInput
    connect?: usersWhereUniqueInput
  }

  export type group_communityUpdateOneWithoutUser_group_communityInput = {
    create?: XOR<group_communityCreateWithoutUser_group_communityInput, group_communityUncheckedCreateWithoutUser_group_communityInput>
    connectOrCreate?: group_communityCreateOrConnectWithoutUser_group_communityInput
    upsert?: group_communityUpsertWithoutUser_group_communityInput
    disconnect?: boolean
    delete?: boolean
    connect?: group_communityWhereUniqueInput
    update?: XOR<group_communityUpdateWithoutUser_group_communityInput, group_communityUncheckedUpdateWithoutUser_group_communityInput>
  }

  export type usersUpdateOneWithoutUser_group_communityInput = {
    create?: XOR<usersCreateWithoutUser_group_communityInput, usersUncheckedCreateWithoutUser_group_communityInput>
    connectOrCreate?: usersCreateOrConnectWithoutUser_group_communityInput
    upsert?: usersUpsertWithoutUser_group_communityInput
    disconnect?: boolean
    delete?: boolean
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutUser_group_communityInput, usersUncheckedUpdateWithoutUser_group_communityInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type usersCreateWithoutCommunityInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    user_community?: user_communityCreateNestedManyWithoutUsersInput
    user_group_community?: user_group_communityCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCommunityInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    user_community?: user_communityUncheckedCreateNestedManyWithoutUsersInput
    user_group_community?: user_group_communityUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCommunityInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCommunityInput, usersUncheckedCreateWithoutCommunityInput>
  }

  export type group_communityCreateWithoutCommunityInput = {
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
    user_group_community?: user_group_communityCreateNestedManyWithoutGroup_communityInput
  }

  export type group_communityUncheckedCreateWithoutCommunityInput = {
    id?: number
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
    user_group_community?: user_group_communityUncheckedCreateNestedManyWithoutGroup_communityInput
  }

  export type group_communityCreateOrConnectWithoutCommunityInput = {
    where: group_communityWhereUniqueInput
    create: XOR<group_communityCreateWithoutCommunityInput, group_communityUncheckedCreateWithoutCommunityInput>
  }

  export type group_communityCreateManyCommunityInputEnvelope = {
    data: Enumerable<group_communityCreateManyCommunityInput>
    skipDuplicates?: boolean
  }

  export type user_communityCreateWithoutCommunityInput = {
    users?: usersCreateNestedOneWithoutUser_communityInput
  }

  export type user_communityUncheckedCreateWithoutCommunityInput = {
    id?: number
    user_uid?: string | null
  }

  export type user_communityCreateOrConnectWithoutCommunityInput = {
    where: user_communityWhereUniqueInput
    create: XOR<user_communityCreateWithoutCommunityInput, user_communityUncheckedCreateWithoutCommunityInput>
  }

  export type user_communityCreateManyCommunityInputEnvelope = {
    data: Enumerable<user_communityCreateManyCommunityInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCommunityInput = {
    update: XOR<usersUpdateWithoutCommunityInput, usersUncheckedUpdateWithoutCommunityInput>
    create: XOR<usersCreateWithoutCommunityInput, usersUncheckedCreateWithoutCommunityInput>
  }

  export type usersUpdateWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_community?: user_communityUpdateManyWithoutUsersInput
    user_group_community?: user_group_communityUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    user_community?: user_communityUncheckedUpdateManyWithoutUsersInput
    user_group_community?: user_group_communityUncheckedUpdateManyWithoutUsersInput
  }

  export type group_communityUpsertWithWhereUniqueWithoutCommunityInput = {
    where: group_communityWhereUniqueInput
    update: XOR<group_communityUpdateWithoutCommunityInput, group_communityUncheckedUpdateWithoutCommunityInput>
    create: XOR<group_communityCreateWithoutCommunityInput, group_communityUncheckedCreateWithoutCommunityInput>
  }

  export type group_communityUpdateWithWhereUniqueWithoutCommunityInput = {
    where: group_communityWhereUniqueInput
    data: XOR<group_communityUpdateWithoutCommunityInput, group_communityUncheckedUpdateWithoutCommunityInput>
  }

  export type group_communityUpdateManyWithWhereWithoutCommunityInput = {
    where: group_communityScalarWhereInput
    data: XOR<group_communityUpdateManyMutationInput, group_communityUncheckedUpdateManyWithoutGroup_communityInput>
  }

  export type group_communityScalarWhereInput = {
    AND?: Enumerable<group_communityScalarWhereInput>
    OR?: Enumerable<group_communityScalarWhereInput>
    NOT?: Enumerable<group_communityScalarWhereInput>
    id?: IntFilter | number
    community_id?: IntNullableFilter | number | null
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    max_members?: IntNullableFilter | number | null
    with_password?: IntNullableFilter | number | null
    password?: StringNullableFilter | string | null
  }

  export type user_communityUpsertWithWhereUniqueWithoutCommunityInput = {
    where: user_communityWhereUniqueInput
    update: XOR<user_communityUpdateWithoutCommunityInput, user_communityUncheckedUpdateWithoutCommunityInput>
    create: XOR<user_communityCreateWithoutCommunityInput, user_communityUncheckedCreateWithoutCommunityInput>
  }

  export type user_communityUpdateWithWhereUniqueWithoutCommunityInput = {
    where: user_communityWhereUniqueInput
    data: XOR<user_communityUpdateWithoutCommunityInput, user_communityUncheckedUpdateWithoutCommunityInput>
  }

  export type user_communityUpdateManyWithWhereWithoutCommunityInput = {
    where: user_communityScalarWhereInput
    data: XOR<user_communityUpdateManyMutationInput, user_communityUncheckedUpdateManyWithoutUser_communityInput>
  }

  export type user_communityScalarWhereInput = {
    AND?: Enumerable<user_communityScalarWhereInput>
    OR?: Enumerable<user_communityScalarWhereInput>
    NOT?: Enumerable<user_communityScalarWhereInput>
    id?: IntFilter | number
    community_id?: IntNullableFilter | number | null
    user_uid?: StringNullableFilter | string | null
  }

  export type communityCreateWithoutUser_communityInput = {
    title?: string | null
    description?: string | null
    with_password?: number | null
    password?: string | null
    users?: usersCreateNestedOneWithoutCommunityInput
    group_community?: group_communityCreateNestedManyWithoutCommunityInput
  }

  export type communityUncheckedCreateWithoutUser_communityInput = {
    id?: number
    title?: string | null
    description?: string | null
    author_uid?: string | null
    with_password?: number | null
    password?: string | null
    group_community?: group_communityUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type communityCreateOrConnectWithoutUser_communityInput = {
    where: communityWhereUniqueInput
    create: XOR<communityCreateWithoutUser_communityInput, communityUncheckedCreateWithoutUser_communityInput>
  }

  export type usersCreateWithoutUser_communityInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    community?: communityCreateNestedManyWithoutUsersInput
    user_group_community?: user_group_communityCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUser_communityInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    community?: communityUncheckedCreateNestedManyWithoutUsersInput
    user_group_community?: user_group_communityUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUser_communityInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_communityInput, usersUncheckedCreateWithoutUser_communityInput>
  }

  export type communityUpsertWithoutUser_communityInput = {
    update: XOR<communityUpdateWithoutUser_communityInput, communityUncheckedUpdateWithoutUser_communityInput>
    create: XOR<communityCreateWithoutUser_communityInput, communityUncheckedCreateWithoutUser_communityInput>
  }

  export type communityUpdateWithoutUser_communityInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutCommunityInput
    group_community?: group_communityUpdateManyWithoutCommunityInput
  }

  export type communityUncheckedUpdateWithoutUser_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    author_uid?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    group_community?: group_communityUncheckedUpdateManyWithoutCommunityInput
  }

  export type usersUpsertWithoutUser_communityInput = {
    update: XOR<usersUpdateWithoutUser_communityInput, usersUncheckedUpdateWithoutUser_communityInput>
    create: XOR<usersCreateWithoutUser_communityInput, usersUncheckedCreateWithoutUser_communityInput>
  }

  export type usersUpdateWithoutUser_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUpdateManyWithoutUsersInput
    user_group_community?: user_group_communityUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutUser_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUncheckedUpdateManyWithoutUsersInput
    user_group_community?: user_group_communityUncheckedUpdateManyWithoutUsersInput
  }

  export type communityCreateWithoutUsersInput = {
    title?: string | null
    description?: string | null
    with_password?: number | null
    password?: string | null
    group_community?: group_communityCreateNestedManyWithoutCommunityInput
    user_community?: user_communityCreateNestedManyWithoutCommunityInput
  }

  export type communityUncheckedCreateWithoutUsersInput = {
    id?: number
    title?: string | null
    description?: string | null
    with_password?: number | null
    password?: string | null
    group_community?: group_communityUncheckedCreateNestedManyWithoutCommunityInput
    user_community?: user_communityUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type communityCreateOrConnectWithoutUsersInput = {
    where: communityWhereUniqueInput
    create: XOR<communityCreateWithoutUsersInput, communityUncheckedCreateWithoutUsersInput>
  }

  export type communityCreateManyUsersInputEnvelope = {
    data: Enumerable<communityCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type user_communityCreateWithoutUsersInput = {
    community?: communityCreateNestedOneWithoutUser_communityInput
  }

  export type user_communityUncheckedCreateWithoutUsersInput = {
    id?: number
    community_id?: number | null
  }

  export type user_communityCreateOrConnectWithoutUsersInput = {
    where: user_communityWhereUniqueInput
    create: XOR<user_communityCreateWithoutUsersInput, user_communityUncheckedCreateWithoutUsersInput>
  }

  export type user_communityCreateManyUsersInputEnvelope = {
    data: Enumerable<user_communityCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type user_group_communityCreateWithoutUsersInput = {
    group_community?: group_communityCreateNestedOneWithoutUser_group_communityInput
  }

  export type user_group_communityUncheckedCreateWithoutUsersInput = {
    id?: number
    group_id?: number | null
  }

  export type user_group_communityCreateOrConnectWithoutUsersInput = {
    where: user_group_communityWhereUniqueInput
    create: XOR<user_group_communityCreateWithoutUsersInput, user_group_communityUncheckedCreateWithoutUsersInput>
  }

  export type user_group_communityCreateManyUsersInputEnvelope = {
    data: Enumerable<user_group_communityCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type communityUpsertWithWhereUniqueWithoutUsersInput = {
    where: communityWhereUniqueInput
    update: XOR<communityUpdateWithoutUsersInput, communityUncheckedUpdateWithoutUsersInput>
    create: XOR<communityCreateWithoutUsersInput, communityUncheckedCreateWithoutUsersInput>
  }

  export type communityUpdateWithWhereUniqueWithoutUsersInput = {
    where: communityWhereUniqueInput
    data: XOR<communityUpdateWithoutUsersInput, communityUncheckedUpdateWithoutUsersInput>
  }

  export type communityUpdateManyWithWhereWithoutUsersInput = {
    where: communityScalarWhereInput
    data: XOR<communityUpdateManyMutationInput, communityUncheckedUpdateManyWithoutCommunityInput>
  }

  export type communityScalarWhereInput = {
    AND?: Enumerable<communityScalarWhereInput>
    OR?: Enumerable<communityScalarWhereInput>
    NOT?: Enumerable<communityScalarWhereInput>
    id?: IntFilter | number
    title?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    author_uid?: StringNullableFilter | string | null
    with_password?: IntNullableFilter | number | null
    password?: StringNullableFilter | string | null
  }

  export type user_communityUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_communityWhereUniqueInput
    update: XOR<user_communityUpdateWithoutUsersInput, user_communityUncheckedUpdateWithoutUsersInput>
    create: XOR<user_communityCreateWithoutUsersInput, user_communityUncheckedCreateWithoutUsersInput>
  }

  export type user_communityUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_communityWhereUniqueInput
    data: XOR<user_communityUpdateWithoutUsersInput, user_communityUncheckedUpdateWithoutUsersInput>
  }

  export type user_communityUpdateManyWithWhereWithoutUsersInput = {
    where: user_communityScalarWhereInput
    data: XOR<user_communityUpdateManyMutationInput, user_communityUncheckedUpdateManyWithoutUser_communityInput>
  }

  export type user_group_communityUpsertWithWhereUniqueWithoutUsersInput = {
    where: user_group_communityWhereUniqueInput
    update: XOR<user_group_communityUpdateWithoutUsersInput, user_group_communityUncheckedUpdateWithoutUsersInput>
    create: XOR<user_group_communityCreateWithoutUsersInput, user_group_communityUncheckedCreateWithoutUsersInput>
  }

  export type user_group_communityUpdateWithWhereUniqueWithoutUsersInput = {
    where: user_group_communityWhereUniqueInput
    data: XOR<user_group_communityUpdateWithoutUsersInput, user_group_communityUncheckedUpdateWithoutUsersInput>
  }

  export type user_group_communityUpdateManyWithWhereWithoutUsersInput = {
    where: user_group_communityScalarWhereInput
    data: XOR<user_group_communityUpdateManyMutationInput, user_group_communityUncheckedUpdateManyWithoutUser_group_communityInput>
  }

  export type user_group_communityScalarWhereInput = {
    AND?: Enumerable<user_group_communityScalarWhereInput>
    OR?: Enumerable<user_group_communityScalarWhereInput>
    NOT?: Enumerable<user_group_communityScalarWhereInput>
    id?: IntFilter | number
    group_id?: IntNullableFilter | number | null
    user_uid?: StringNullableFilter | string | null
  }

  export type communityCreateWithoutGroup_communityInput = {
    title?: string | null
    description?: string | null
    with_password?: number | null
    password?: string | null
    users?: usersCreateNestedOneWithoutCommunityInput
    user_community?: user_communityCreateNestedManyWithoutCommunityInput
  }

  export type communityUncheckedCreateWithoutGroup_communityInput = {
    id?: number
    title?: string | null
    description?: string | null
    author_uid?: string | null
    with_password?: number | null
    password?: string | null
    user_community?: user_communityUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type communityCreateOrConnectWithoutGroup_communityInput = {
    where: communityWhereUniqueInput
    create: XOR<communityCreateWithoutGroup_communityInput, communityUncheckedCreateWithoutGroup_communityInput>
  }

  export type user_group_communityCreateWithoutGroup_communityInput = {
    users?: usersCreateNestedOneWithoutUser_group_communityInput
  }

  export type user_group_communityUncheckedCreateWithoutGroup_communityInput = {
    id?: number
    user_uid?: string | null
  }

  export type user_group_communityCreateOrConnectWithoutGroup_communityInput = {
    where: user_group_communityWhereUniqueInput
    create: XOR<user_group_communityCreateWithoutGroup_communityInput, user_group_communityUncheckedCreateWithoutGroup_communityInput>
  }

  export type user_group_communityCreateManyGroup_communityInputEnvelope = {
    data: Enumerable<user_group_communityCreateManyGroup_communityInput>
    skipDuplicates?: boolean
  }

  export type communityUpsertWithoutGroup_communityInput = {
    update: XOR<communityUpdateWithoutGroup_communityInput, communityUncheckedUpdateWithoutGroup_communityInput>
    create: XOR<communityCreateWithoutGroup_communityInput, communityUncheckedCreateWithoutGroup_communityInput>
  }

  export type communityUpdateWithoutGroup_communityInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    users?: usersUpdateOneWithoutCommunityInput
    user_community?: user_communityUpdateManyWithoutCommunityInput
  }

  export type communityUncheckedUpdateWithoutGroup_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    author_uid?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user_community?: user_communityUncheckedUpdateManyWithoutCommunityInput
  }

  export type user_group_communityUpsertWithWhereUniqueWithoutGroup_communityInput = {
    where: user_group_communityWhereUniqueInput
    update: XOR<user_group_communityUpdateWithoutGroup_communityInput, user_group_communityUncheckedUpdateWithoutGroup_communityInput>
    create: XOR<user_group_communityCreateWithoutGroup_communityInput, user_group_communityUncheckedCreateWithoutGroup_communityInput>
  }

  export type user_group_communityUpdateWithWhereUniqueWithoutGroup_communityInput = {
    where: user_group_communityWhereUniqueInput
    data: XOR<user_group_communityUpdateWithoutGroup_communityInput, user_group_communityUncheckedUpdateWithoutGroup_communityInput>
  }

  export type user_group_communityUpdateManyWithWhereWithoutGroup_communityInput = {
    where: user_group_communityScalarWhereInput
    data: XOR<user_group_communityUpdateManyMutationInput, user_group_communityUncheckedUpdateManyWithoutUser_group_communityInput>
  }

  export type group_communityCreateWithoutUser_group_communityInput = {
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
    community?: communityCreateNestedOneWithoutGroup_communityInput
  }

  export type group_communityUncheckedCreateWithoutUser_group_communityInput = {
    id?: number
    community_id?: number | null
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
  }

  export type group_communityCreateOrConnectWithoutUser_group_communityInput = {
    where: group_communityWhereUniqueInput
    create: XOR<group_communityCreateWithoutUser_group_communityInput, group_communityUncheckedCreateWithoutUser_group_communityInput>
  }

  export type usersCreateWithoutUser_group_communityInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    community?: communityCreateNestedManyWithoutUsersInput
    user_community?: user_communityCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutUser_group_communityInput = {
    id?: number
    firebase_uid: string
    email?: string | null
    name?: string | null
    last_name?: string | null
    community?: communityUncheckedCreateNestedManyWithoutUsersInput
    user_community?: user_communityUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutUser_group_communityInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUser_group_communityInput, usersUncheckedCreateWithoutUser_group_communityInput>
  }

  export type group_communityUpsertWithoutUser_group_communityInput = {
    update: XOR<group_communityUpdateWithoutUser_group_communityInput, group_communityUncheckedUpdateWithoutUser_group_communityInput>
    create: XOR<group_communityCreateWithoutUser_group_communityInput, group_communityUncheckedCreateWithoutUser_group_communityInput>
  }

  export type group_communityUpdateWithoutUser_group_communityInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUpdateOneWithoutGroup_communityInput
  }

  export type group_communityUncheckedUpdateWithoutUser_group_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    community_id?: NullableIntFieldUpdateOperationsInput | number | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUpsertWithoutUser_group_communityInput = {
    update: XOR<usersUpdateWithoutUser_group_communityInput, usersUncheckedUpdateWithoutUser_group_communityInput>
    create: XOR<usersCreateWithoutUser_group_communityInput, usersUncheckedCreateWithoutUser_group_communityInput>
  }

  export type usersUpdateWithoutUser_group_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUpdateManyWithoutUsersInput
    user_community?: user_communityUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutUser_group_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    firebase_uid?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    last_name?: NullableStringFieldUpdateOperationsInput | string | null
    community?: communityUncheckedUpdateManyWithoutUsersInput
    user_community?: user_communityUncheckedUpdateManyWithoutUsersInput
  }

  export type group_communityCreateManyCommunityInput = {
    id?: number
    title?: string | null
    description?: string | null
    max_members?: number | null
    with_password?: number | null
    password?: string | null
  }

  export type user_communityCreateManyCommunityInput = {
    id?: number
    user_uid?: string | null
  }

  export type group_communityUpdateWithoutCommunityInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user_group_community?: user_group_communityUpdateManyWithoutGroup_communityInput
  }

  export type group_communityUncheckedUpdateWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    user_group_community?: user_group_communityUncheckedUpdateManyWithoutGroup_communityInput
  }

  export type group_communityUncheckedUpdateManyWithoutGroup_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    max_members?: NullableIntFieldUpdateOperationsInput | number | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_communityUpdateWithoutCommunityInput = {
    users?: usersUpdateOneWithoutUser_communityInput
  }

  export type user_communityUncheckedUpdateWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_communityUncheckedUpdateManyWithoutUser_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type communityCreateManyUsersInput = {
    id?: number
    title?: string | null
    description?: string | null
    with_password?: number | null
    password?: string | null
  }

  export type user_communityCreateManyUsersInput = {
    id?: number
    community_id?: number | null
  }

  export type user_group_communityCreateManyUsersInput = {
    id?: number
    group_id?: number | null
  }

  export type communityUpdateWithoutUsersInput = {
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    group_community?: group_communityUpdateManyWithoutCommunityInput
    user_community?: user_communityUpdateManyWithoutCommunityInput
  }

  export type communityUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    group_community?: group_communityUncheckedUpdateManyWithoutCommunityInput
    user_community?: user_communityUncheckedUpdateManyWithoutCommunityInput
  }

  export type communityUncheckedUpdateManyWithoutCommunityInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    with_password?: NullableIntFieldUpdateOperationsInput | number | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_communityUpdateWithoutUsersInput = {
    community?: communityUpdateOneWithoutUser_communityInput
  }

  export type user_communityUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    community_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_communityUpdateWithoutUsersInput = {
    group_community?: group_communityUpdateOneWithoutUser_group_communityInput
  }

  export type user_group_communityUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_communityUncheckedUpdateManyWithoutUser_group_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_group_communityCreateManyGroup_communityInput = {
    id?: number
    user_uid?: string | null
  }

  export type user_group_communityUpdateWithoutGroup_communityInput = {
    users?: usersUpdateOneWithoutUser_group_communityInput
  }

  export type user_group_communityUncheckedUpdateWithoutGroup_communityInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_uid?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}